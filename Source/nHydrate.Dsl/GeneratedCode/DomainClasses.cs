//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace nHydrate.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass nHydrateModel
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModel.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModel.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("77b5fe81-853a-4b74-8ce5-98612544852f")]
	public abstract partial class nHydrateModelBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// nHydrateModel domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x77b5fe81, 0x853a, 0x4b74, 0x8c, 0xe5, 0x98, 0x61, 0x25, 0x44, 0x85, 0x2f);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected nHydrateModelBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region CompanyName domain property code
		
		/// <summary>
		/// CompanyName domain property Id.
		/// </summary>
		public static readonly global::System.Guid CompanyNameDomainPropertyId = new global::System.Guid(0xe4a7289c, 0xe61c, 0x440e, 0xb8, 0x81, 0x5b, 0x06, 0x95, 0x0f, 0xd6, 0xf0);
		
		/// <summary>
		/// Storage for CompanyName
		/// </summary>
		private global::System.String companyNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CompanyName domain property.
		/// Specifies the company name that will be used to build namespaces
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModel/CompanyName.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.nHydrateModel/CompanyName.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModel/CompanyName.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e4a7289c-e61c-440e-b881-5b06950fd6f0")]
		public virtual global::System.String CompanyName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return companyNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CompanyNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.CompanyName domain property.
		/// </summary>
		internal sealed partial class CompanyNamePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private CompanyNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.CompanyName domain property value handler.
			/// </summary>
			public static readonly CompanyNamePropertyHandler Instance = new CompanyNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.CompanyName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CompanyNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CompanyName;
				//return element.GetValue<global::System.String>("CompanyName", element.companyNamePropertyStorage);
				//return element.companyNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.companyNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region DefaultNamespace domain property code
		
		/// <summary>
		/// DefaultNamespace domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultNamespaceDomainPropertyId = new global::System.Guid(0x878ea856, 0xee97, 0x4991, 0xbb, 0x04, 0x94, 0x10, 0x62, 0xbb, 0xea, 0x33);
		
		/// <summary>
		/// Storage for DefaultNamespace
		/// </summary>
		private global::System.String defaultNamespacePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DefaultNamespace domain property.
		/// Determines the default namespace and base project names of all generated
		/// projects. Leave blank for the default value of CompanyName.ProjectName
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModel/DefaultNamespace.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.nHydrateModel/DefaultNamespace.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModel/DefaultNamespace.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("878ea856-ee97-4991-bb04-941062bbea33")]
		public virtual global::System.String DefaultNamespace
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultNamespacePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultNamespacePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.DefaultNamespace domain property.
		/// </summary>
		internal sealed partial class DefaultNamespacePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private DefaultNamespacePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.DefaultNamespace domain property value handler.
			/// </summary>
			public static readonly DefaultNamespacePropertyHandler Instance = new DefaultNamespacePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.DefaultNamespace domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultNamespaceDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DefaultNamespace;
				//return element.GetValue<global::System.String>("DefaultNamespace", element.defaultNamespacePropertyStorage);
				//return element.defaultNamespacePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultNamespacePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region ProjectName domain property code
		
		/// <summary>
		/// ProjectName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ProjectNameDomainPropertyId = new global::System.Guid(0x6aed7802, 0x72a5, 0x4336, 0x9d, 0xd3, 0xfa, 0xd4, 0x6e, 0xc0, 0x57, 0x59);
		
		/// <summary>
		/// Storage for ProjectName
		/// </summary>
		private global::System.String projectNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ProjectName domain property.
		/// Specifies the name of the generated assembly
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModel/ProjectName.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.nHydrateModel/ProjectName.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModel/ProjectName.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6aed7802-72a5-4336-9dd3-fad46ec05759")]
		public virtual global::System.String ProjectName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return projectNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ProjectNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.ProjectName domain property.
		/// </summary>
		internal sealed partial class ProjectNamePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private ProjectNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.ProjectName domain property value handler.
			/// </summary>
			public static readonly ProjectNamePropertyHandler Instance = new ProjectNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.ProjectName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ProjectNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ProjectName;
				//return element.GetValue<global::System.String>("ProjectName", element.projectNamePropertyStorage);
				//return element.projectNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.projectNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region UseUTCTime domain property code
		
		/// <summary>
		/// UseUTCTime domain property Id.
		/// </summary>
		public static readonly global::System.Guid UseUTCTimeDomainPropertyId = new global::System.Guid(0x5be892eb, 0x5e4f, 0x4065, 0xad, 0x4a, 0xee, 0x6b, 0x1c, 0x65, 0xc8, 0xd4);
		
		/// <summary>
		/// Storage for UseUTCTime
		/// </summary>
		private global::System.Boolean useUTCTimePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of UseUTCTime domain property.
		/// Specifies whether UTC or local time is used for the created and modified audits
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModel/UseUTCTime.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.nHydrateModel/UseUTCTime.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModel/UseUTCTime.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("5be892eb-5e4f-4065-ad4a-ee6b1c65c8d4")]
		public virtual global::System.Boolean UseUTCTime
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return useUTCTimePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				UseUTCTimePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.UseUTCTime domain property.
		/// </summary>
		internal sealed partial class UseUTCTimePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.Boolean>
		{
			private UseUTCTimePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.UseUTCTime domain property value handler.
			/// </summary>
			public static readonly UseUTCTimePropertyHandler Instance = new UseUTCTimePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.UseUTCTime domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return UseUTCTimeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.UseUTCTime;
				//return element.GetValue<global::System.Boolean>("UseUTCTime", element.useUTCTimePropertyStorage);
				//return element.useUTCTimePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.useUTCTimePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region Version domain property code
		
		/// <summary>
		/// Version domain property Id.
		/// </summary>
		public static readonly global::System.Guid VersionDomainPropertyId = new global::System.Guid(0x0d7940fc, 0x1697, 0x4d8a, 0x95, 0x7a, 0x64, 0x79, 0xd9, 0x71, 0x0a, 0x87);
		
		/// <summary>
		/// Storage for Version
		/// </summary>
		private global::System.String versionPropertyStorage = "0.0.0.0";
		
		/// <summary>
		/// Gets or sets the value of Version domain property.
		/// Specifies the version number of the generated assembly
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate.Dsl.Design.Converters.VersionConverter))]
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModel/Version.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.nHydrateModel/Version.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModel/Version.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("0.0.0.0")]
		[DslModeling::DomainObjectId("0d7940fc-1697-4d8a-957a-6479d9710a87")]
		public virtual global::System.String Version
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return versionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				VersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.Version domain property.
		/// </summary>
		internal sealed partial class VersionPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private VersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.Version domain property value handler.
			/// </summary>
			public static readonly VersionPropertyHandler Instance = new VersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.Version domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return VersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Version;
				//return element.GetValue<global::System.String>("Version", element.versionPropertyStorage);
				//return element.versionPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.versionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region CreatedByColumnName domain property code
		
		/// <summary>
		/// CreatedByColumnName domain property Id.
		/// </summary>
		public static readonly global::System.Guid CreatedByColumnNameDomainPropertyId = new global::System.Guid(0xefe34335, 0x275d, 0x4e98, 0xaa, 0x77, 0x2c, 0x72, 0x38, 0x7c, 0xa5, 0xf2);
		
		/// <summary>
		/// Storage for CreatedByColumnName
		/// </summary>
		private global::System.String createdByColumnNamePropertyStorage = "CreatedBy";
		
		/// <summary>
		/// Gets or sets the value of CreatedByColumnName domain property.
		/// Determines the name of the created by field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModel/CreatedByColumnName.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.nHydrateModel/CreatedByColumnName.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModel/CreatedByColumnName.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("CreatedBy")]
		[DslModeling::DomainObjectId("efe34335-275d-4e98-aa77-2c72387ca5f2")]
		public virtual global::System.String CreatedByColumnName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return createdByColumnNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CreatedByColumnNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.CreatedByColumnName domain property.
		/// </summary>
		internal sealed partial class CreatedByColumnNamePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private CreatedByColumnNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.CreatedByColumnName domain property value handler.
			/// </summary>
			public static readonly CreatedByColumnNamePropertyHandler Instance = new CreatedByColumnNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.CreatedByColumnName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CreatedByColumnNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CreatedByColumnName;
				//return element.GetValue<global::System.String>("CreatedByColumnName", element.createdByColumnNamePropertyStorage);
				//return element.createdByColumnNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.createdByColumnNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region CreatedDateColumnName domain property code
		
		/// <summary>
		/// CreatedDateColumnName domain property Id.
		/// </summary>
		public static readonly global::System.Guid CreatedDateColumnNameDomainPropertyId = new global::System.Guid(0xb33e6b20, 0xf095, 0x403e, 0xb0, 0xa4, 0x72, 0xde, 0xb6, 0xa0, 0x14, 0xd3);
		
		/// <summary>
		/// Storage for CreatedDateColumnName
		/// </summary>
		private global::System.String createdDateColumnNamePropertyStorage = "CreatedDate";
		
		/// <summary>
		/// Gets or sets the value of CreatedDateColumnName domain property.
		/// Determines the name of the created date field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModel/CreatedDateColumnName.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.nHydrateModel/CreatedDateColumnName.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModel/CreatedDateColumnName.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("CreatedDate")]
		[DslModeling::DomainObjectId("b33e6b20-f095-403e-b0a4-72deb6a014d3")]
		public virtual global::System.String CreatedDateColumnName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return createdDateColumnNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CreatedDateColumnNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.CreatedDateColumnName domain property.
		/// </summary>
		internal sealed partial class CreatedDateColumnNamePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private CreatedDateColumnNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.CreatedDateColumnName domain property value handler.
			/// </summary>
			public static readonly CreatedDateColumnNamePropertyHandler Instance = new CreatedDateColumnNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.CreatedDateColumnName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CreatedDateColumnNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CreatedDateColumnName;
				//return element.GetValue<global::System.String>("CreatedDateColumnName", element.createdDateColumnNamePropertyStorage);
				//return element.createdDateColumnNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.createdDateColumnNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region ModifiedDateColumnName domain property code
		
		/// <summary>
		/// ModifiedDateColumnName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModifiedDateColumnNameDomainPropertyId = new global::System.Guid(0xc9898612, 0xec74, 0x4afc, 0x90, 0x4a, 0xfa, 0xb3, 0xe0, 0xb7, 0xa1, 0x32);
		
		/// <summary>
		/// Storage for ModifiedDateColumnName
		/// </summary>
		private global::System.String modifiedDateColumnNamePropertyStorage = "ModifiedDate";
		
		/// <summary>
		/// Gets or sets the value of ModifiedDateColumnName domain property.
		/// Determines the name of the modified date field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModel/ModifiedDateColumnName.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.nHydrateModel/ModifiedDateColumnName.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModel/ModifiedDateColumnName.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("ModifiedDate")]
		[DslModeling::DomainObjectId("c9898612-ec74-4afc-904a-fab3e0b7a132")]
		public virtual global::System.String ModifiedDateColumnName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modifiedDateColumnNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModifiedDateColumnNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.ModifiedDateColumnName domain property.
		/// </summary>
		internal sealed partial class ModifiedDateColumnNamePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private ModifiedDateColumnNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.ModifiedDateColumnName domain property value handler.
			/// </summary>
			public static readonly ModifiedDateColumnNamePropertyHandler Instance = new ModifiedDateColumnNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.ModifiedDateColumnName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModifiedDateColumnNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ModifiedDateColumnName;
				//return element.GetValue<global::System.String>("ModifiedDateColumnName", element.modifiedDateColumnNamePropertyStorage);
				//return element.modifiedDateColumnNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modifiedDateColumnNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region ModifiedByColumnName domain property code
		
		/// <summary>
		/// ModifiedByColumnName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModifiedByColumnNameDomainPropertyId = new global::System.Guid(0xc3940874, 0x169f, 0x44ff, 0x92, 0x6e, 0x68, 0x0f, 0xeb, 0xb2, 0xc8, 0xf1);
		
		/// <summary>
		/// Storage for ModifiedByColumnName
		/// </summary>
		private global::System.String modifiedByColumnNamePropertyStorage = "ModifiedBy";
		
		/// <summary>
		/// Gets or sets the value of ModifiedByColumnName domain property.
		/// Determines the name of the modified by field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModel/ModifiedByColumnName.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.nHydrateModel/ModifiedByColumnName.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModel/ModifiedByColumnName.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("ModifiedBy")]
		[DslModeling::DomainObjectId("c3940874-169f-44ff-926e-680febb2c8f1")]
		public virtual global::System.String ModifiedByColumnName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modifiedByColumnNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModifiedByColumnNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.ModifiedByColumnName domain property.
		/// </summary>
		internal sealed partial class ModifiedByColumnNamePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private ModifiedByColumnNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.ModifiedByColumnName domain property value handler.
			/// </summary>
			public static readonly ModifiedByColumnNamePropertyHandler Instance = new ModifiedByColumnNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.ModifiedByColumnName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModifiedByColumnNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ModifiedByColumnName;
				//return element.GetValue<global::System.String>("ModifiedByColumnName", element.modifiedByColumnNamePropertyStorage);
				//return element.modifiedByColumnNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modifiedByColumnNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region ConcurrencyCheckColumnName domain property code
		
		/// <summary>
		/// ConcurrencyCheckColumnName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConcurrencyCheckColumnNameDomainPropertyId = new global::System.Guid(0xeaf7be21, 0xe695, 0x48b8, 0x96, 0xb3, 0xe1, 0xac, 0xe1, 0x13, 0x9a, 0xab);
		
		/// <summary>
		/// Storage for ConcurrencyCheckColumnName
		/// </summary>
		private global::System.String concurrencyCheckColumnNamePropertyStorage = "__concurrency";
		
		/// <summary>
		/// Gets or sets the value of ConcurrencyCheckColumnName domain property.
		/// Determines the name of the column used for optimistic concurrency
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModel/ConcurrencyCheckColumnName.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.nHydrateModel/ConcurrencyCheckColumnName.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModel/ConcurrencyCheckColumnName.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("__concurrency")]
		[DslModeling::DomainObjectId("eaf7be21-e695-48b8-96b3-e1ace1139aab")]
		public virtual global::System.String ConcurrencyCheckColumnName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return concurrencyCheckColumnNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConcurrencyCheckColumnNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.ConcurrencyCheckColumnName domain property.
		/// </summary>
		internal sealed partial class ConcurrencyCheckColumnNamePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private ConcurrencyCheckColumnNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.ConcurrencyCheckColumnName domain property value handler.
			/// </summary>
			public static readonly ConcurrencyCheckColumnNamePropertyHandler Instance = new ConcurrencyCheckColumnNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.ConcurrencyCheckColumnName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConcurrencyCheckColumnNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ConcurrencyCheckColumnName;
				//return element.GetValue<global::System.String>("ConcurrencyCheckColumnName", element.concurrencyCheckColumnNamePropertyStorage);
				//return element.concurrencyCheckColumnNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.concurrencyCheckColumnNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region GrantUser domain property code
		
		/// <summary>
		/// GrantUser domain property Id.
		/// </summary>
		public static readonly global::System.Guid GrantUserDomainPropertyId = new global::System.Guid(0x04550abb, 0x3bfc, 0x4787, 0x90, 0x64, 0x85, 0xbf, 0xbe, 0x9c, 0xd4, 0x8e);
		
		/// <summary>
		/// Storage for GrantUser
		/// </summary>
		private global::System.String grantUserPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of GrantUser domain property.
		/// Determines the database user to grant access permissions to for database objects
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModel/GrantUser.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.nHydrateModel/GrantUser.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModel/GrantUser.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("04550abb-3bfc-4787-9064-85bfbe9cd48e")]
		public virtual global::System.String GrantUser
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return grantUserPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GrantUserPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.GrantUser domain property.
		/// </summary>
		internal sealed partial class GrantUserPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private GrantUserPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.GrantUser domain property value handler.
			/// </summary>
			public static readonly GrantUserPropertyHandler Instance = new GrantUserPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.GrantUser domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GrantUserDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.GrantUser;
				//return element.GetValue<global::System.String>("GrantUser", element.grantUserPropertyStorage);
				//return element.grantUserPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.grantUserPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region ModelToDisk domain property code
		
		/// <summary>
		/// ModelToDisk domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModelToDiskDomainPropertyId = new global::System.Guid(0x6fbe9eae, 0xbebb, 0x4ede, 0xb0, 0xdf, 0x3f, 0x8e, 0xa4, 0x15, 0x36, 0x33);
		
		/// <summary>
		/// Storage for ModelToDisk
		/// </summary>
		private global::System.Boolean modelToDiskPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ModelToDisk domain property.
		/// Determines if model objects are duplicated on disk for easy editing
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModel/ModelToDisk.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.nHydrateModel/ModelToDisk.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModel/ModelToDisk.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("6fbe9eae-bebb-4ede-b0df-3f8ea4153633")]
		public virtual global::System.Boolean ModelToDisk
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modelToDiskPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModelToDiskPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.ModelToDisk domain property.
		/// </summary>
		internal sealed partial class ModelToDiskPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.Boolean>
		{
			private ModelToDiskPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.ModelToDisk domain property value handler.
			/// </summary>
			public static readonly ModelToDiskPropertyHandler Instance = new ModelToDiskPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.ModelToDisk domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModelToDiskDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ModelToDisk;
				//return element.GetValue<global::System.Boolean>("ModelToDisk", element.modelToDiskPropertyStorage);
				//return element.modelToDiskPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modelToDiskPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region ModelVersion domain property code
		
		/// <summary>
		/// ModelVersion domain property Id.
		/// </summary>
		public static readonly global::System.Guid ModelVersionDomainPropertyId = new global::System.Guid(0xcfac3b29, 0x311d, 0x4da5, 0x8d, 0x93, 0xbb, 0x44, 0x22, 0x83, 0xb5, 0x1f);
		
		/// <summary>
		/// Storage for ModelVersion
		/// </summary>
		private global::System.String modelVersionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ModelVersion domain property.
		/// Determines the version of the model. Used for tracking changes and provides an
		/// upgrade path for older models
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModel/ModelVersion.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.nHydrateModel/ModelVersion.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModel/ModelVersion.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("cfac3b29-311d-4da5-8d93-bb442283b51f")]
		public virtual global::System.String ModelVersion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return modelVersionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ModelVersionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.ModelVersion domain property.
		/// </summary>
		internal sealed partial class ModelVersionPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private ModelVersionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.ModelVersion domain property value handler.
			/// </summary>
			public static readonly ModelVersionPropertyHandler Instance = new ModelVersionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.ModelVersion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ModelVersionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ModelVersion;
				//return element.GetValue<global::System.String>("ModelVersion", element.modelVersionPropertyStorage);
				//return element.modelVersionPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.modelVersionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region OutputTarget domain property code
		
		/// <summary>
		/// OutputTarget domain property Id.
		/// </summary>
		public static readonly global::System.Guid OutputTargetDomainPropertyId = new global::System.Guid(0xbe71ee12, 0x7759, 0x4612, 0x93, 0x0e, 0xe5, 0x34, 0x30, 0xfe, 0xbf, 0xb8);
		
		/// <summary>
		/// Storage for OutputTarget
		/// </summary>
		private global::System.String outputTargetPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of OutputTarget domain property.
		/// The target location for generated projects
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModel/OutputTarget.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.nHydrateModel/OutputTarget.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModel/OutputTarget.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("be71ee12-7759-4612-930e-e53430febfb8")]
		public virtual global::System.String OutputTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return outputTargetPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OutputTargetPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.OutputTarget domain property.
		/// </summary>
		internal sealed partial class OutputTargetPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private OutputTargetPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.OutputTarget domain property value handler.
			/// </summary>
			public static readonly OutputTargetPropertyHandler Instance = new OutputTargetPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.OutputTarget domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OutputTargetDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.OutputTarget;
				//return element.GetValue<global::System.String>("OutputTarget", element.outputTargetPropertyStorage);
				//return element.outputTargetPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.outputTargetPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region TenantColumnName domain property code
		
		/// <summary>
		/// TenantColumnName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TenantColumnNameDomainPropertyId = new global::System.Guid(0xfd3902ce, 0x3044, 0x47e2, 0xa3, 0x79, 0x88, 0x5c, 0x8e, 0x1a, 0x1a, 0x4d);
		
		/// <summary>
		/// Storage for TenantColumnName
		/// </summary>
		private global::System.String tenantColumnNamePropertyStorage = "__tenant_user";
		
		/// <summary>
		/// Gets or sets the value of TenantColumnName domain property.
		/// Determines the name of the column to hold tenant information for tenant tables
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModel/TenantColumnName.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.nHydrateModel/TenantColumnName.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModel/TenantColumnName.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("__tenant_user")]
		[DslModeling::DomainObjectId("fd3902ce-3044-47e2-a379-885c8e1a1a4d")]
		public virtual global::System.String TenantColumnName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return tenantColumnNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TenantColumnNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.TenantColumnName domain property.
		/// </summary>
		internal sealed partial class TenantColumnNamePropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.String>
		{
			private TenantColumnNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.TenantColumnName domain property value handler.
			/// </summary>
			public static readonly TenantColumnNamePropertyHandler Instance = new TenantColumnNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.TenantColumnName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TenantColumnNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.TenantColumnName;
				//return element.GetValue<global::System.String>("TenantColumnName", element.tenantColumnNamePropertyStorage);
				//return element.tenantColumnNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.tenantColumnNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region EmitSafetyScripts domain property code
		
		/// <summary>
		/// EmitSafetyScripts domain property Id.
		/// </summary>
		public static readonly global::System.Guid EmitSafetyScriptsDomainPropertyId = new global::System.Guid(0xf348a2a7, 0x4cf4, 0x440c, 0xb0, 0xb5, 0x75, 0xbe, 0x15, 0xbf, 0x6d, 0xde);
		
		/// <summary>
		/// Storage for EmitSafetyScripts
		/// </summary>
		private global::System.Boolean emitSafetyScriptsPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of EmitSafetyScripts domain property.
		/// Determines if normalization safety scripts are emitted into the installer
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateModel/EmitSafetyScripts.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.nHydrateModel/EmitSafetyScripts.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateModel/EmitSafetyScripts.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("f348a2a7-4cf4-440c-b0b5-75be15bf6dde")]
		public virtual global::System.Boolean EmitSafetyScripts
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return emitSafetyScriptsPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				EmitSafetyScriptsPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the nHydrateModel.EmitSafetyScripts domain property.
		/// </summary>
		internal sealed partial class EmitSafetyScriptsPropertyHandler : DslModeling::DomainPropertyValueHandler<nHydrateModelBase, global::System.Boolean>
		{
			private EmitSafetyScriptsPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the nHydrateModel.EmitSafetyScripts domain property value handler.
			/// </summary>
			public static readonly EmitSafetyScriptsPropertyHandler Instance = new EmitSafetyScriptsPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the nHydrateModel.EmitSafetyScripts domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return EmitSafetyScriptsDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(nHydrateModelBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.EmitSafetyScripts;
				//return element.GetValue<global::System.Boolean>("EmitSafetyScripts", element.emitSafetyScriptsPropertyStorage);
				//return element.emitSafetyScriptsPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(nHydrateModelBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.emitSafetyScriptsPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("nHydrateModel"));
				}
			}
		}
		
		#endregion
		#region Entities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Entities.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> Entities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(global::nHydrate.Dsl.nHydrateModelHasEntities.nHydrateModelDomainRoleId);
			}
		}
		#endregion
		#region Views opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Views.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<View> Views
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<View>, View>(global::nHydrate.Dsl.nHydrateModelHasViews.nHydrateModelDomainRoleId);
			}
		}
		#endregion
		#region RelationFields opposite domain role accessor
		
		/// <summary>
		/// Gets a list of RelationFields.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<RelationField> RelationFields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<RelationField>, RelationField>(global::nHydrate.Dsl.nHydrateModelHasRelationFields.nHydrateModelDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate.Dsl.Entity.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate.Dsl.View.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate.Dsl.RelationField.DomainClassId)) 
				{
					// Call custom method implemented in partial class
					return this.CanMergeRelationField(rootElement, elementGroupPrototype);
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::nHydrate.Dsl.Entity sourceEntity1 = sourceElement as global::nHydrate.Dsl.Entity;
			if (sourceEntity1 != null)
			{
				// Create link for path nHydrateModelHasEntities.Entities
				this.Entities.Add(sourceEntity1);

				return;
			}
				
			global::nHydrate.Dsl.View sourceView2 = sourceElement as global::nHydrate.Dsl.View;
			if (sourceView2 != null)
			{
				// Create link for path nHydrateModelHasViews.Views
				this.Views.Add(sourceView2);

				return;
			}
				
			global::nHydrate.Dsl.RelationField sourceRelationField3 = sourceElement as global::nHydrate.Dsl.RelationField;
			if (sourceRelationField3 != null)
			{
				// Create link for path nHydrateModelHasRelationFields.RelationFields
				this.RelationFields.Add(sourceRelationField3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::nHydrate.Dsl.Entity sourceEntity1 = sourceElement as global::nHydrate.Dsl.Entity;
			if (sourceEntity1 != null)
			{
				// Delete link for path nHydrateModelHasEntities.Entities
				
				foreach (DslModeling::ElementLink link in global::nHydrate.Dsl.nHydrateModelHasEntities.GetLinks((global::nHydrate.Dsl.nHydrateModel)this, sourceEntity1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate.Dsl.nHydrateModelHasEntities.nHydrateModelDomainRoleId, global::nHydrate.Dsl.nHydrateModelHasEntities.EntityDomainRoleId);
				}

				return;
			}
				
			global::nHydrate.Dsl.View sourceView2 = sourceElement as global::nHydrate.Dsl.View;
			if (sourceView2 != null)
			{
				// Delete link for path nHydrateModelHasViews.Views
				
				foreach (DslModeling::ElementLink link in global::nHydrate.Dsl.nHydrateModelHasViews.GetLinks((global::nHydrate.Dsl.nHydrateModel)this, sourceView2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate.Dsl.nHydrateModelHasViews.nHydrateModelDomainRoleId, global::nHydrate.Dsl.nHydrateModelHasViews.ViewDomainRoleId);
				}

				return;
			}
				
			global::nHydrate.Dsl.RelationField sourceRelationField3 = sourceElement as global::nHydrate.Dsl.RelationField;
			if (sourceRelationField3 != null)
			{
				// Delete link for path nHydrateModelHasRelationFields.RelationFields
				
				foreach (DslModeling::ElementLink link in global::nHydrate.Dsl.nHydrateModelHasRelationFields.GetLinks((global::nHydrate.Dsl.nHydrateModel)this, sourceRelationField3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate.Dsl.nHydrateModelHasRelationFields.nHydrateModelDomainRoleId, global::nHydrate.Dsl.nHydrateModelHasRelationFields.RelationFieldDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass nHydrateModel
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class nHydrateModel : nHydrateModelBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public nHydrateModel(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public nHydrateModel(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass Entity
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.Entity.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.Entity.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("99e3c3f3-d9f6-4226-b914-b50a93434e4f")]
	public abstract partial class EntityBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// Entity domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x99e3c3f3, 0xd9f6, 0x4226, 0xb9, 0x14, 0xb5, 0x0a, 0x93, 0x43, 0x4e, 0x4f);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected EntityBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x767a392d, 0xc773, 0x430a, 0xab, 0xbb, 0xe3, 0x21, 0x99, 0x3f, 0xc5, 0xde);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Determines the name of this entity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Entity/Name.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Entity/Name.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Entity/Name.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("767a392d-c773-430a-abbb-e321993fc5de")]
		public virtual global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Name;
				//return element.GetValue<global::System.String>("Name", element.namePropertyStorage);
				//return element.namePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x542415d5, 0xc314, 0x471a, 0xa4, 0x84, 0x11, 0x86, 0xae, 0x40, 0xcd, 0x25);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// A summary of the entity
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Entity/Summary.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Entity/Summary.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Entity/Summary.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("542415d5-c314-471a-a484-1186ae40cd25")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region AllowCreateAudit domain property code
		
		/// <summary>
		/// AllowCreateAudit domain property Id.
		/// </summary>
		public static readonly global::System.Guid AllowCreateAuditDomainPropertyId = new global::System.Guid(0xe56a3e68, 0x5513, 0x499e, 0xa9, 0x33, 0x51, 0x10, 0x05, 0x7d, 0x2b, 0x1f);
		
		/// <summary>
		/// Storage for AllowCreateAudit
		/// </summary>
		private global::System.Boolean allowCreateAuditPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of AllowCreateAudit domain property.
		/// Determines if the fields 'CreatedBy' and 'CreateDate' are created
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Entity/AllowCreateAudit.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Entity/AllowCreateAudit.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Entity/AllowCreateAudit.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("e56a3e68-5513-499e-a933-5110057d2b1f")]
		public virtual global::System.Boolean AllowCreateAudit
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return allowCreateAuditPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AllowCreateAuditPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.AllowCreateAudit domain property.
		/// </summary>
		internal sealed partial class AllowCreateAuditPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.Boolean>
		{
			private AllowCreateAuditPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.AllowCreateAudit domain property value handler.
			/// </summary>
			public static readonly AllowCreateAuditPropertyHandler Instance = new AllowCreateAuditPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.AllowCreateAudit domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AllowCreateAuditDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.AllowCreateAudit;
				//return element.GetValue<global::System.Boolean>("AllowCreateAudit", element.allowCreateAuditPropertyStorage);
				//return element.allowCreateAuditPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.allowCreateAuditPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region AllowModifyAudit domain property code
		
		/// <summary>
		/// AllowModifyAudit domain property Id.
		/// </summary>
		public static readonly global::System.Guid AllowModifyAuditDomainPropertyId = new global::System.Guid(0x50a4b7c2, 0x6a8e, 0x44f3, 0xbb, 0x0b, 0xfc, 0xbf, 0x1f, 0x51, 0xf8, 0x55);
		
		/// <summary>
		/// Storage for AllowModifyAudit
		/// </summary>
		private global::System.Boolean allowModifyAuditPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of AllowModifyAudit domain property.
		/// Determines if the fields 'ModifiedBy' and 'ModifiedDate' are created
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Entity/AllowModifyAudit.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Entity/AllowModifyAudit.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Entity/AllowModifyAudit.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("50a4b7c2-6a8e-44f3-bb0b-fcbf1f51f855")]
		public virtual global::System.Boolean AllowModifyAudit
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return allowModifyAuditPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AllowModifyAuditPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.AllowModifyAudit domain property.
		/// </summary>
		internal sealed partial class AllowModifyAuditPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.Boolean>
		{
			private AllowModifyAuditPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.AllowModifyAudit domain property value handler.
			/// </summary>
			public static readonly AllowModifyAuditPropertyHandler Instance = new AllowModifyAuditPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.AllowModifyAudit domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AllowModifyAuditDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.AllowModifyAudit;
				//return element.GetValue<global::System.Boolean>("AllowModifyAudit", element.allowModifyAuditPropertyStorage);
				//return element.allowModifyAuditPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.allowModifyAuditPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region AllowTimestamp domain property code
		
		/// <summary>
		/// AllowTimestamp domain property Id.
		/// </summary>
		public static readonly global::System.Guid AllowTimestampDomainPropertyId = new global::System.Guid(0x9fc4b9f7, 0x6d29, 0x431c, 0x8f, 0x71, 0x6a, 0xc6, 0xa7, 0x4d, 0xa3, 0x70);
		
		/// <summary>
		/// Storage for AllowTimestamp
		/// </summary>
		private global::System.Boolean allowTimestampPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of AllowTimestamp domain property.
		/// Determines if this table will have a timestamp field created and used for
		/// synchronization
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Entity/AllowTimestamp.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Entity/AllowTimestamp.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Entity/AllowTimestamp.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("9fc4b9f7-6d29-431c-8f71-6ac6a74da370")]
		public virtual global::System.Boolean AllowTimestamp
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return allowTimestampPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AllowTimestampPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.AllowTimestamp domain property.
		/// </summary>
		internal sealed partial class AllowTimestampPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.Boolean>
		{
			private AllowTimestampPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.AllowTimestamp domain property value handler.
			/// </summary>
			public static readonly AllowTimestampPropertyHandler Instance = new AllowTimestampPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.AllowTimestamp domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AllowTimestampDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.AllowTimestamp;
				//return element.GetValue<global::System.Boolean>("AllowTimestamp", element.allowTimestampPropertyStorage);
				//return element.allowTimestampPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.allowTimestampPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region IsAssociative domain property code
		
		/// <summary>
		/// IsAssociative domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAssociativeDomainPropertyId = new global::System.Guid(0x06d09cfc, 0x31af, 0x465a, 0xaa, 0x16, 0xf6, 0xea, 0xe9, 0x78, 0xdc, 0x92);
		
		/// <summary>
		/// Storage for IsAssociative
		/// </summary>
		private global::System.Boolean isAssociativePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsAssociative domain property.
		/// Determines if this is an intermediary entity between two other entities
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Entity/IsAssociative.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Entity/IsAssociative.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Entity/IsAssociative.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("06d09cfc-31af-465a-aa16-f6eae978dc92")]
		public virtual global::System.Boolean IsAssociative
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAssociativePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAssociativePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.IsAssociative domain property.
		/// </summary>
		internal sealed partial class IsAssociativePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.Boolean>
		{
			private IsAssociativePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.IsAssociative domain property value handler.
			/// </summary>
			public static readonly IsAssociativePropertyHandler Instance = new IsAssociativePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.IsAssociative domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAssociativeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsAssociative;
				//return element.GetValue<global::System.Boolean>("IsAssociative", element.isAssociativePropertyStorage);
				//return element.isAssociativePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAssociativePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region Immutable domain property code
		
		/// <summary>
		/// Immutable domain property Id.
		/// </summary>
		public static readonly global::System.Guid ImmutableDomainPropertyId = new global::System.Guid(0x7b18441c, 0x79a6, 0x4b6e, 0x9d, 0x2a, 0xb1, 0x55, 0xeb, 0x75, 0xdb, 0xe5);
		
		/// <summary>
		/// Storage for Immutable
		/// </summary>
		private global::System.Boolean immutablePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Immutable domain property.
		/// Determines if this entity can be changed
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Entity/Immutable.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Entity/Immutable.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Entity/Immutable.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7b18441c-79a6-4b6e-9d2a-b155eb75dbe5")]
		public virtual global::System.Boolean Immutable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return immutablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ImmutablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.Immutable domain property.
		/// </summary>
		internal sealed partial class ImmutablePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.Boolean>
		{
			private ImmutablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.Immutable domain property value handler.
			/// </summary>
			public static readonly ImmutablePropertyHandler Instance = new ImmutablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.Immutable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ImmutableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Immutable;
				//return element.GetValue<global::System.Boolean>("Immutable", element.immutablePropertyStorage);
				//return element.immutablePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.immutablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region Schema domain property code
		
		/// <summary>
		/// Schema domain property Id.
		/// </summary>
		public static readonly global::System.Guid SchemaDomainPropertyId = new global::System.Guid(0xb6cd65f4, 0x36aa, 0x4ac5, 0xb6, 0x27, 0x43, 0xc8, 0x5f, 0x04, 0x76, 0x26);
		
		/// <summary>
		/// Storage for Schema
		/// </summary>
		private global::System.String schemaPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Schema domain property.
		/// The database schema in which this entity lives
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Entity/Schema.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Entity/Schema.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Entity/Schema.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b6cd65f4-36aa-4ac5-b627-43c85f047626")]
		public virtual global::System.String Schema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return schemaPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SchemaPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.Schema domain property.
		/// </summary>
		internal sealed partial class SchemaPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.String>
		{
			private SchemaPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.Schema domain property value handler.
			/// </summary>
			public static readonly SchemaPropertyHandler Instance = new SchemaPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.Schema domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SchemaDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Schema;
				//return element.GetValue<global::System.String>("Schema", element.schemaPropertyStorage);
				//return element.schemaPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.schemaPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region CodeFacade domain property code
		
		/// <summary>
		/// CodeFacade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeFacadeDomainPropertyId = new global::System.Guid(0xdf8974d7, 0x0da4, 0x49ab, 0xb2, 0x08, 0x1e, 0x5a, 0xca, 0x96, 0xcf, 0x6b);
		
		/// <summary>
		/// Storage for CodeFacade
		/// </summary>
		private global::System.String codeFacadePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CodeFacade domain property.
		/// Determines the object name used in the API. If this property is blank the 'Name'
		/// property is used in the API. This property can be used to mask the database
		/// identifier.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Entity/CodeFacade.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Entity/CodeFacade.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Entity/CodeFacade.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("df8974d7-0da4-49ab-b208-1e5aca96cf6b")]
		public virtual global::System.String CodeFacade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeFacadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeFacadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.CodeFacade domain property.
		/// </summary>
		internal sealed partial class CodeFacadePropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.String>
		{
			private CodeFacadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.CodeFacade domain property value handler.
			/// </summary>
			public static readonly CodeFacadePropertyHandler Instance = new CodeFacadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.CodeFacade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeFacadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CodeFacade;
				//return element.GetValue<global::System.String>("CodeFacade", element.codeFacadePropertyStorage);
				//return element.codeFacadePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeFacadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region GeneratesDoubleDerived domain property code
		
		/// <summary>
		/// GeneratesDoubleDerived domain property Id.
		/// </summary>
		public static readonly global::System.Guid GeneratesDoubleDerivedDomainPropertyId = new global::System.Guid(0xa597dfa1, 0xfc68, 0x43e9, 0x85, 0x6f, 0x2e, 0xf8, 0x22, 0x91, 0xea, 0x30);
		
		/// <summary>
		/// Storage for GeneratesDoubleDerived
		/// </summary>
		private global::System.Boolean generatesDoubleDerivedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of GeneratesDoubleDerived domain property.
		/// If True, will generate both a base class with all functionality and a partial
		/// class to support customization through overrides
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Entity/GeneratesDoubleDerived.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Entity/GeneratesDoubleDerived.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Entity/GeneratesDoubleDerived.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a597dfa1-fc68-43e9-856f-2ef82291ea30")]
		public virtual global::System.Boolean GeneratesDoubleDerived
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return generatesDoubleDerivedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GeneratesDoubleDerivedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.GeneratesDoubleDerived domain property.
		/// </summary>
		internal sealed partial class GeneratesDoubleDerivedPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.Boolean>
		{
			private GeneratesDoubleDerivedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.GeneratesDoubleDerived domain property value handler.
			/// </summary>
			public static readonly GeneratesDoubleDerivedPropertyHandler Instance = new GeneratesDoubleDerivedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.GeneratesDoubleDerived domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GeneratesDoubleDerivedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.GeneratesDoubleDerived;
				//return element.GetValue<global::System.Boolean>("GeneratesDoubleDerived", element.generatesDoubleDerivedPropertyStorage);
				//return element.generatesDoubleDerivedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.generatesDoubleDerivedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region TypedEntity domain property code
		
		/// <summary>
		/// TypedEntity domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypedEntityDomainPropertyId = new global::System.Guid(0x4ecb38e6, 0xdacf, 0x439a, 0x84, 0x71, 0x72, 0x63, 0x41, 0x05, 0xdc, 0x80);
		
		/// <summary>
		/// Storage for TypedEntity
		/// </summary>
		private TypedEntityConstants typedEntityPropertyStorage = TypedEntityConstants.None;
		
		/// <summary>
		/// Gets or sets the value of TypedEntity domain property.
		/// Determines if this is a typed entity
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Entity/TypedEntity.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Entity/TypedEntity.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Entity/TypedEntity.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(TypedEntityConstants.None)]
		[DslModeling::DomainObjectId("4ecb38e6-dacf-439a-8471-72634105dc80")]
		public virtual TypedEntityConstants TypedEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typedEntityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypedEntityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.TypedEntity domain property.
		/// </summary>
		internal sealed partial class TypedEntityPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, TypedEntityConstants>
		{
			private TypedEntityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.TypedEntity domain property value handler.
			/// </summary>
			public static readonly TypedEntityPropertyHandler Instance = new TypedEntityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.TypedEntity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypedEntityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed TypedEntityConstants GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.TypedEntity;
				//return element.GetValue<TypedEntityConstants>("TypedEntity", element.typedEntityPropertyStorage);
				//return element.typedEntityPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, TypedEntityConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				TypedEntityConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typedEntityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region IsTenant domain property code
		
		/// <summary>
		/// IsTenant domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsTenantDomainPropertyId = new global::System.Guid(0xec18a590, 0x98a8, 0x4f16, 0xa4, 0xc0, 0xad, 0xac, 0x33, 0x77, 0xeb, 0x56);
		
		/// <summary>
		/// Storage for IsTenant
		/// </summary>
		private global::System.Boolean isTenantPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsTenant domain property.
		/// Determines if the table is tenant based
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Entity/IsTenant.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Entity/IsTenant.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Entity/IsTenant.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ec18a590-98a8-4f16-a4c0-adac3377eb56")]
		public virtual global::System.Boolean IsTenant
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isTenantPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsTenantPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.IsTenant domain property.
		/// </summary>
		internal sealed partial class IsTenantPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.Boolean>
		{
			private IsTenantPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.IsTenant domain property value handler.
			/// </summary>
			public static readonly IsTenantPropertyHandler Instance = new IsTenantPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.IsTenant domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsTenantDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsTenant;
				//return element.GetValue<global::System.Boolean>("IsTenant", element.isTenantPropertyStorage);
				//return element.isTenantPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isTenantPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Entity"));
				}
			}
		}
		
		#endregion
		#region CopyStateInfo domain property code
		
		/// <summary>
		/// CopyStateInfo domain property Id.
		/// </summary>
		public static readonly global::System.Guid CopyStateInfoDomainPropertyId = new global::System.Guid(0xe3468fb2, 0x910f, 0x48e4, 0x8a, 0xd7, 0x7d, 0xbe, 0x95, 0x2c, 0x4c, 0x5b);
		
		/// <summary>
		/// Gets or sets the value of CopyStateInfo domain property.
		/// Description for nHydrate.Dsl.Entity.Copy State Info
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Entity/CopyStateInfo.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Entity/CopyStateInfo.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainProperty(Kind = DslModeling::DomainPropertyKind.CustomStorage)]
		[DslModeling::DomainObjectId("e3468fb2-910f-48e4-8ad7-7dbe952c4c5b")]
		public virtual global::System.String CopyStateInfo
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return CopyStateInfoPropertyHandler.Instance.GetValue(this);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CopyStateInfoPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Entity.CopyStateInfo domain property.
		/// </summary>
		internal sealed partial class CopyStateInfoPropertyHandler : DslModeling::DomainPropertyValueHandler<EntityBase, global::System.String>
		{
			private CopyStateInfoPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Entity.CopyStateInfo domain property value handler.
			/// </summary>
			public static readonly CopyStateInfoPropertyHandler Instance = new CopyStateInfoPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Entity.CopyStateInfo domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CopyStateInfoDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(EntityBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				// There is no storage for CopyStateInfo because its Kind is
				// set to CustomStorage. Please provide the GetCopyStateInfoValue()
				// method on the domain class.
				return element.GetCopyStateInfoValue();
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(EntityBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					// There is no storage for CopyStateInfo because its Kind is
					// set to CustomStorage. Please provide the SetCopyStateInfoValue()
					// method on the domain class.
					element.SetCopyStateInfoValue(newValue);
					ValueChanged(element, oldValue, GetValue(element));
				}
			}
		}
		
		#endregion
		#region nHydrateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets nHydrateModel.
		/// </summary>
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate.Dsl.nHydrateModelHasEntities.EntityDomainRoleId) as nHydrateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate.Dsl.nHydrateModelHasEntities.EntityDomainRoleId, value);
			}
		}
		#endregion
		#region ChildEntities opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ChildEntities.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> ChildEntities
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(global::nHydrate.Dsl.EntityHasEntities.ParentEntityDomainRoleId);
			}
		}
		#endregion
		#region ParentEntity opposite domain role accessor
		
		/// <summary>
		/// Gets a list of ParentEntity.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Entity> ParentEntity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Entity>, Entity>(global::nHydrate.Dsl.EntityHasEntities.ChildEntityDomainRoleId);
			}
		}
		#endregion
		#region Fields opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Field> Fields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Field>, Field>(global::nHydrate.Dsl.EntityHasFields.EntityDomainRoleId);
			}
		}
		#endregion
		#region StaticDatum opposite domain role accessor
		
		/// <summary>
		/// Gets a list of StaticDatum.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<StaticData> StaticDatum
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<StaticData>, StaticData>(global::nHydrate.Dsl.EntityHasStaticDatum.EntityDomainRoleId);
			}
		}
		#endregion
		#region Indexes opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Indexes.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Index> Indexes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Index>, Index>(global::nHydrate.Dsl.EntityHasIndexes.EntityDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate.Dsl.Field.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate.Dsl.StaticData.DomainClassId)) 
				{
					// Call custom method implemented in partial class
					return this.CanMergeStaticData(rootElement, elementGroupPrototype);
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate.Dsl.Index.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::nHydrate.Dsl.Field sourceField1 = sourceElement as global::nHydrate.Dsl.Field;
			if (sourceField1 != null)
			{
				// Create link for path EntityHasFields.Fields
				this.Fields.Add(sourceField1);

				return;
			}
				
			global::nHydrate.Dsl.StaticData sourceStaticData2 = sourceElement as global::nHydrate.Dsl.StaticData;
			if (sourceStaticData2 != null)
			{
				// Create link for path EntityHasStaticDatum.StaticDatum
				this.StaticDatum.Add(sourceStaticData2);

				return;
			}
				
			global::nHydrate.Dsl.Index sourceIndex3 = sourceElement as global::nHydrate.Dsl.Index;
			if (sourceIndex3 != null)
			{
				// Create link for path EntityHasIndexes.Indexes
				this.Indexes.Add(sourceIndex3);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::nHydrate.Dsl.Field sourceField1 = sourceElement as global::nHydrate.Dsl.Field;
			if (sourceField1 != null)
			{
				// Delete link for path EntityHasFields.Fields
				
				foreach (DslModeling::ElementLink link in global::nHydrate.Dsl.EntityHasFields.GetLinks((global::nHydrate.Dsl.Entity)this, sourceField1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate.Dsl.EntityHasFields.EntityDomainRoleId, global::nHydrate.Dsl.EntityHasFields.FieldDomainRoleId);
				}

				return;
			}
				
			global::nHydrate.Dsl.StaticData sourceStaticData2 = sourceElement as global::nHydrate.Dsl.StaticData;
			if (sourceStaticData2 != null)
			{
				// Delete link for path EntityHasStaticDatum.StaticDatum
				
				foreach (DslModeling::ElementLink link in global::nHydrate.Dsl.EntityHasStaticDatum.GetLinks((global::nHydrate.Dsl.Entity)this, sourceStaticData2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate.Dsl.EntityHasStaticDatum.EntityDomainRoleId, global::nHydrate.Dsl.EntityHasStaticDatum.StaticDataDomainRoleId);
				}

				return;
			}
				
			global::nHydrate.Dsl.Index sourceIndex3 = sourceElement as global::nHydrate.Dsl.Index;
			if (sourceIndex3 != null)
			{
				// Delete link for path EntityHasIndexes.Indexes
				
				foreach (DslModeling::ElementLink link in global::nHydrate.Dsl.EntityHasIndexes.GetLinks((global::nHydrate.Dsl.Entity)this, sourceIndex3))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate.Dsl.EntityHasIndexes.EntityDomainRoleId, global::nHydrate.Dsl.EntityHasIndexes.IndexDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass Entity
	/// This object represents a database table
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class Entity : EntityBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Entity(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Entity(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass Field
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.Field.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.Field.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("6e74a55a-de35-41e1-b542-908a20112a5d")]
	public abstract partial class FieldBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// Field domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6e74a55a, 0xde35, 0x41e1, 0xb5, 0x42, 0x90, 0x8a, 0x20, 0x11, 0x2a, 0x5d);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected FieldBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xf7eaaafb, 0xaddf, 0x4cae, 0x89, 0x26, 0xb8, 0xda, 0x16, 0xde, 0x5e, 0x62);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Determines the name of this field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/Name.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/Name.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/Name.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("f7eaaafb-addf-4cae-8926-b8da16de5e62")]
		public virtual global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Name;
				//return element.GetValue<global::System.String>("Name", element.namePropertyStorage);
				//return element.namePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Nullable domain property code
		
		/// <summary>
		/// Nullable domain property Id.
		/// </summary>
		public static readonly global::System.Guid NullableDomainPropertyId = new global::System.Guid(0xf990fadc, 0x0b79, 0x46b2, 0x8a, 0xfc, 0xb8, 0x31, 0x82, 0xfb, 0xe1, 0xcc);
		
		/// <summary>
		/// Storage for Nullable
		/// </summary>
		private global::System.Boolean nullablePropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Nullable domain property.
		/// Determines if this item allows null values
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/Nullable.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/Nullable.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/Nullable.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("f990fadc-0b79-46b2-8afc-b83182fbe1cc")]
		public virtual global::System.Boolean Nullable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nullablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NullablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Nullable domain property.
		/// </summary>
		internal sealed partial class NullablePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Boolean>
		{
			private NullablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Nullable domain property value handler.
			/// </summary>
			public static readonly NullablePropertyHandler Instance = new NullablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Nullable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NullableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Nullable;
				//return element.GetValue<global::System.Boolean>("Nullable", element.nullablePropertyStorage);
				//return element.nullablePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nullablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region IsCalculated domain property code
		
		/// <summary>
		/// IsCalculated domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsCalculatedDomainPropertyId = new global::System.Guid(0x9c86b99a, 0x81ab, 0x4d2d, 0x80, 0xf5, 0xdf, 0xcb, 0xa4, 0x1f, 0x42, 0xbe);
		
		/// <summary>
		/// Storage for IsCalculated
		/// </summary>
		private global::System.Boolean isCalculatedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsCalculated domain property.
		/// Determines if this field is based on a calculated database column
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/IsCalculated.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/IsCalculated.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/IsCalculated.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9c86b99a-81ab-4d2d-80f5-dfcba41f42be")]
		public virtual global::System.Boolean IsCalculated
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isCalculatedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsCalculatedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.IsCalculated domain property.
		/// </summary>
		internal sealed partial class IsCalculatedPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Boolean>
		{
			private IsCalculatedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.IsCalculated domain property value handler.
			/// </summary>
			public static readonly IsCalculatedPropertyHandler Instance = new IsCalculatedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.IsCalculated domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsCalculatedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsCalculated;
				//return element.GetValue<global::System.Boolean>("IsCalculated", element.isCalculatedPropertyStorage);
				//return element.isCalculatedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isCalculatedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region DataType domain property code
		
		/// <summary>
		/// DataType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainPropertyId = new global::System.Guid(0xaccd89d9, 0x66da, 0x4ff0, 0x8d, 0x2e, 0xa2, 0xe8, 0xd7, 0xff, 0x7a, 0x6c);
		
		/// <summary>
		/// Storage for DataType
		/// </summary>
		private DataTypeConstants dataTypePropertyStorage = DataTypeConstants.VarChar;
		
		/// <summary>
		/// Gets or sets the value of DataType domain property.
		/// Determines the data type of this field
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate.Dsl.Design.Converters.DatatypeConverter))]
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/DataType.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/DataType.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/DataType.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DataTypeConstants.VarChar)]
		[DslModeling::DomainObjectId("accd89d9-66da-4ff0-8d2e-a2e8d7ff7a6c")]
		public virtual DataTypeConstants DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.DataType domain property.
		/// </summary>
		internal sealed partial class DataTypePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, DataTypeConstants>
		{
			private DataTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.DataType domain property value handler.
			/// </summary>
			public static readonly DataTypePropertyHandler Instance = new DataTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.DataType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DataTypeConstants GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DataType;
				//return element.GetValue<DataTypeConstants>("DataType", element.dataTypePropertyStorage);
				//return element.dataTypePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, DataTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DataTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Default domain property code
		
		/// <summary>
		/// Default domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultDomainPropertyId = new global::System.Guid(0x78416a86, 0x37eb, 0x4d7a, 0xa3, 0x9e, 0xe2, 0x31, 0x1c, 0x32, 0xe1, 0x45);
		
		/// <summary>
		/// Storage for Default
		/// </summary>
		private global::System.String defaultPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Default domain property.
		/// Determines the default value of this field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/Default.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/Default.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/Default.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("78416a86-37eb-4d7a-a39e-e2311c32e145")]
		public virtual global::System.String Default
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Default domain property.
		/// </summary>
		internal sealed partial class DefaultPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private DefaultPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Default domain property value handler.
			/// </summary>
			public static readonly DefaultPropertyHandler Instance = new DefaultPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Default domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Default;
				//return element.GetValue<global::System.String>("Default", element.defaultPropertyStorage);
				//return element.defaultPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0xac63ac37, 0xd989, 0x4ca7, 0xa4, 0xcd, 0x93, 0xd7, 0xbd, 0x06, 0xfb, 0x26);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines summary text were applicable
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/Summary.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/Summary.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/Summary.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ac63ac37-d989-4ca7-a4cd-93d7bd06fb26")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Formula domain property code
		
		/// <summary>
		/// Formula domain property Id.
		/// </summary>
		public static readonly global::System.Guid FormulaDomainPropertyId = new global::System.Guid(0x3dcfa810, 0x4d71, 0x4d08, 0xaf, 0x7d, 0xe3, 0xf5, 0x23, 0xd8, 0xfe, 0xa6);
		
		/// <summary>
		/// Storage for Formula
		/// </summary>
		private global::System.String formulaPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Formula domain property.
		/// The formula for a computed field
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/Formula.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/Formula.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/Formula.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3dcfa810-4d71-4d08-af7d-e3f523d8fea6")]
		public virtual global::System.String Formula
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return formulaPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FormulaPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Formula domain property.
		/// </summary>
		internal sealed partial class FormulaPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private FormulaPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Formula domain property value handler.
			/// </summary>
			public static readonly FormulaPropertyHandler Instance = new FormulaPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Formula domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FormulaDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Formula;
				//return element.GetValue<global::System.String>("Formula", element.formulaPropertyStorage);
				//return element.formulaPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.formulaPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Identity domain property code
		
		/// <summary>
		/// Identity domain property Id.
		/// </summary>
		public static readonly global::System.Guid IdentityDomainPropertyId = new global::System.Guid(0x29e9a228, 0x046e, 0x468d, 0x93, 0x0d, 0xeb, 0xca, 0xac, 0x1c, 0x04, 0x18);
		
		/// <summary>
		/// Storage for Identity
		/// </summary>
		private IdentityTypeConstants identityPropertyStorage = IdentityTypeConstants.None;
		
		/// <summary>
		/// Gets or sets the value of Identity domain property.
		/// Determines the type of identity for this column
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/Identity.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/Identity.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/Identity.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(IdentityTypeConstants.None)]
		[DslModeling::DomainObjectId("29e9a228-046e-468d-930d-ebcaac1c0418")]
		public virtual IdentityTypeConstants Identity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return identityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IdentityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Identity domain property.
		/// </summary>
		internal sealed partial class IdentityPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, IdentityTypeConstants>
		{
			private IdentityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Identity domain property value handler.
			/// </summary>
			public static readonly IdentityPropertyHandler Instance = new IdentityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Identity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IdentityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed IdentityTypeConstants GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Identity;
				//return element.GetValue<IdentityTypeConstants>("Identity", element.identityPropertyStorage);
				//return element.identityPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, IdentityTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				IdentityTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.identityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region IsIndexed domain property code
		
		/// <summary>
		/// IsIndexed domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsIndexedDomainPropertyId = new global::System.Guid(0xd5ad0098, 0x1d8a, 0x4873, 0xa3, 0x70, 0xe2, 0x60, 0xa2, 0x04, 0xaf, 0x50);
		
		/// <summary>
		/// Storage for IsIndexed
		/// </summary>
		private global::System.Boolean isIndexedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsIndexed domain property.
		/// Determines if this field has an associated database index
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/IsIndexed.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/IsIndexed.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/IsIndexed.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d5ad0098-1d8a-4873-a370-e260a204af50")]
		public virtual global::System.Boolean IsIndexed
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isIndexedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsIndexedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.IsIndexed domain property.
		/// </summary>
		internal sealed partial class IsIndexedPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Boolean>
		{
			private IsIndexedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.IsIndexed domain property value handler.
			/// </summary>
			public static readonly IsIndexedPropertyHandler Instance = new IsIndexedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.IsIndexed domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsIndexedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsIndexed;
				//return element.GetValue<global::System.Boolean>("IsIndexed", element.isIndexedPropertyStorage);
				//return element.isIndexedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isIndexedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region IsUnique domain property code
		
		/// <summary>
		/// IsUnique domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsUniqueDomainPropertyId = new global::System.Guid(0xd99371ef, 0xdd34, 0x4b20, 0xb5, 0xba, 0xde, 0x15, 0x96, 0x03, 0x98, 0x2c);
		
		/// <summary>
		/// Storage for IsUnique
		/// </summary>
		private global::System.Boolean isUniquePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsUnique domain property.
		/// Determines if this field is marked as unique
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/IsUnique.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/IsUnique.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/IsUnique.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d99371ef-dd34-4b20-b5ba-de159603982c")]
		public virtual global::System.Boolean IsUnique
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isUniquePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsUniquePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.IsUnique domain property.
		/// </summary>
		internal sealed partial class IsUniquePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Boolean>
		{
			private IsUniquePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.IsUnique domain property value handler.
			/// </summary>
			public static readonly IsUniquePropertyHandler Instance = new IsUniquePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.IsUnique domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsUniqueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsUnique;
				//return element.GetValue<global::System.Boolean>("IsUnique", element.isUniquePropertyStorage);
				//return element.isUniquePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isUniquePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Length domain property code
		
		/// <summary>
		/// Length domain property Id.
		/// </summary>
		public static readonly global::System.Guid LengthDomainPropertyId = new global::System.Guid(0x84851d5c, 0x4f27, 0x4464, 0x8a, 0x10, 0x22, 0x19, 0x08, 0x86, 0x08, 0xe2);
		
		/// <summary>
		/// Storage for Length
		/// </summary>
		private global::System.Int32 lengthPropertyStorage = 50;
		
		/// <summary>
		/// Gets or sets the value of Length domain property.
		/// Determines the size of this column in bytes
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate.Dsl.Design.Converters.TextLengthConverter))]
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/Length.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/Length.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/Length.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(50)]
		[DslModeling::DomainObjectId("84851d5c-4f27-4464-8a10-2219088608e2")]
		public virtual global::System.Int32 Length
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return lengthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Length domain property.
		/// </summary>
		internal sealed partial class LengthPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Int32>
		{
			private LengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Length domain property value handler.
			/// </summary>
			public static readonly LengthPropertyHandler Instance = new LengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Length domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Length;
				//return element.GetValue<global::System.Int32>("Length", element.lengthPropertyStorage);
				//return element.lengthPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.lengthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region IsPrimaryKey domain property code
		
		/// <summary>
		/// IsPrimaryKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPrimaryKeyDomainPropertyId = new global::System.Guid(0x658312f1, 0x4067, 0x4791, 0x9c, 0x8e, 0x81, 0x8d, 0x08, 0x6c, 0x10, 0x8e);
		
		/// <summary>
		/// Storage for IsPrimaryKey
		/// </summary>
		private global::System.Boolean isPrimaryKeyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsPrimaryKey domain property.
		/// Determine if this field is the entity primary key
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/IsPrimaryKey.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/IsPrimaryKey.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/IsPrimaryKey.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("658312f1-4067-4791-9c8e-818d086c108e")]
		public virtual global::System.Boolean IsPrimaryKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPrimaryKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPrimaryKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.IsPrimaryKey domain property.
		/// </summary>
		internal sealed partial class IsPrimaryKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Boolean>
		{
			private IsPrimaryKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.IsPrimaryKey domain property value handler.
			/// </summary>
			public static readonly IsPrimaryKeyPropertyHandler Instance = new IsPrimaryKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.IsPrimaryKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPrimaryKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsPrimaryKey;
				//return element.GetValue<global::System.Boolean>("IsPrimaryKey", element.isPrimaryKeyPropertyStorage);
				//return element.isPrimaryKeyPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPrimaryKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Scale domain property code
		
		/// <summary>
		/// Scale domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScaleDomainPropertyId = new global::System.Guid(0x6ebe23fb, 0x3b81, 0x433b, 0xa8, 0x78, 0x0c, 0xfd, 0x9d, 0x4a, 0xa4, 0xa5);
		
		/// <summary>
		/// Storage for Scale
		/// </summary>
		private global::System.Int32 scalePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Scale domain property.
		/// Determines the scale of some data types
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate.Dsl.Design.Converters.TextDecimalScaleConverter))]
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/Scale.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/Scale.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/Scale.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6ebe23fb-3b81-433b-a878-0cfd9d4aa4a5")]
		public virtual global::System.Int32 Scale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scalePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Scale domain property.
		/// </summary>
		internal sealed partial class ScalePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Int32>
		{
			private ScalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Scale domain property value handler.
			/// </summary>
			public static readonly ScalePropertyHandler Instance = new ScalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Scale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Scale;
				//return element.GetValue<global::System.Int32>("Scale", element.scalePropertyStorage);
				//return element.scalePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scalePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region CodeFacade domain property code
		
		/// <summary>
		/// CodeFacade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeFacadeDomainPropertyId = new global::System.Guid(0x6bb3c3d0, 0xf62d, 0x46cb, 0x90, 0xc6, 0x9e, 0x64, 0x70, 0x9c, 0xb1, 0x3a);
		
		/// <summary>
		/// Storage for CodeFacade
		/// </summary>
		private global::System.String codeFacadePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CodeFacade domain property.
		/// Determines the object name used in the API. If this property is blank the 'Name'
		/// property is used in the API. This property can be used to mask the database
		/// identifier.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/CodeFacade.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/CodeFacade.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/CodeFacade.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("6bb3c3d0-f62d-46cb-90c6-9e64709cb13a")]
		public virtual global::System.String CodeFacade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeFacadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeFacadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.CodeFacade domain property.
		/// </summary>
		internal sealed partial class CodeFacadePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private CodeFacadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.CodeFacade domain property value handler.
			/// </summary>
			public static readonly CodeFacadePropertyHandler Instance = new CodeFacadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.CodeFacade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeFacadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CodeFacade;
				//return element.GetValue<global::System.String>("CodeFacade", element.codeFacadePropertyStorage);
				//return element.codeFacadePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeFacadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region IsReadOnly domain property code
		
		/// <summary>
		/// IsReadOnly domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsReadOnlyDomainPropertyId = new global::System.Guid(0x232598d5, 0x1d67, 0x46f0, 0x8f, 0x5f, 0x63, 0x57, 0xb9, 0x0e, 0xaa, 0x38);
		
		/// <summary>
		/// Storage for IsReadOnly
		/// </summary>
		private global::System.Boolean isReadOnlyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsReadOnly domain property.
		/// Determines if the property can be set in code
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/IsReadOnly.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/IsReadOnly.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/IsReadOnly.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("232598d5-1d67-46f0-8f5f-6357b90eaa38")]
		public virtual global::System.Boolean IsReadOnly
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isReadOnlyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsReadOnlyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.IsReadOnly domain property.
		/// </summary>
		internal sealed partial class IsReadOnlyPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Boolean>
		{
			private IsReadOnlyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.IsReadOnly domain property value handler.
			/// </summary>
			public static readonly IsReadOnlyPropertyHandler Instance = new IsReadOnlyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.IsReadOnly domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsReadOnlyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsReadOnly;
				//return element.GetValue<global::System.Boolean>("IsReadOnly", element.isReadOnlyPropertyStorage);
				//return element.isReadOnlyPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isReadOnlyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region SortOrder domain property code
		
		/// <summary>
		/// SortOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid SortOrderDomainPropertyId = new global::System.Guid(0x2078ed80, 0xab07, 0x48a9, 0x82, 0x6b, 0xbd, 0x2f, 0xe6, 0x94, 0x2a, 0x70);
		
		/// <summary>
		/// Storage for SortOrder
		/// </summary>
		private global::System.Int32 sortOrderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SortOrder domain property.
		/// Order Entered/Database order
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/SortOrder.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/SortOrder.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("2078ed80-ab07-48a9-826b-bd2fe6942a70")]
		public virtual global::System.Int32 SortOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sortOrderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SortOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.SortOrder domain property.
		/// </summary>
		internal sealed partial class SortOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Int32>
		{
			private SortOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.SortOrder domain property value handler.
			/// </summary>
			public static readonly SortOrderPropertyHandler Instance = new SortOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.SortOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SortOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.SortOrder;
				//return element.GetValue<global::System.Int32>("SortOrder", element.sortOrderPropertyStorage);
				//return element.sortOrderPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sortOrderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region DataFormatString domain property code
		
		/// <summary>
		/// DataFormatString domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataFormatStringDomainPropertyId = new global::System.Guid(0xa9a73844, 0x38f5, 0x4261, 0xbd, 0x5c, 0xaa, 0x8b, 0x86, 0x3b, 0xab, 0x7b);
		
		/// <summary>
		/// Storage for DataFormatString
		/// </summary>
		private global::System.String dataFormatStringPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of DataFormatString domain property.
		/// Identifies the format string for data input and presentation
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/DataFormatString.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/DataFormatString.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/DataFormatString.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a9a73844-38f5-4261-bd5c-aa8b863bab7b")]
		public virtual global::System.String DataFormatString
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataFormatStringPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataFormatStringPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.DataFormatString domain property.
		/// </summary>
		internal sealed partial class DataFormatStringPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private DataFormatStringPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.DataFormatString domain property value handler.
			/// </summary>
			public static readonly DataFormatStringPropertyHandler Instance = new DataFormatStringPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.DataFormatString domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataFormatStringDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DataFormatString;
				//return element.GetValue<global::System.String>("DataFormatString", element.dataFormatStringPropertyStorage);
				//return element.dataFormatStringPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataFormatStringPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region DefaultIsFunc domain property code
		
		/// <summary>
		/// DefaultIsFunc domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultIsFuncDomainPropertyId = new global::System.Guid(0x46c0c3a4, 0x3a50, 0x41c2, 0x84, 0x93, 0xc8, 0x52, 0xec, 0x9a, 0x9e, 0x41);
		
		/// <summary>
		/// Storage for DefaultIsFunc
		/// </summary>
		private global::System.Boolean defaultIsFuncPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of DefaultIsFunc domain property.
		/// Determines if the default value is a function
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/DefaultIsFunc.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/DefaultIsFunc.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/DefaultIsFunc.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("46c0c3a4-3a50-41c2-8493-c852ec9a9e41")]
		public virtual global::System.Boolean DefaultIsFunc
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultIsFuncPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultIsFuncPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.DefaultIsFunc domain property.
		/// </summary>
		internal sealed partial class DefaultIsFuncPropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Boolean>
		{
			private DefaultIsFuncPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.DefaultIsFunc domain property value handler.
			/// </summary>
			public static readonly DefaultIsFuncPropertyHandler Instance = new DefaultIsFuncPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.DefaultIsFunc domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultIsFuncDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DefaultIsFunc;
				//return element.GetValue<global::System.Boolean>("DefaultIsFunc", element.defaultIsFuncPropertyStorage);
				//return element.defaultIsFuncPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultIsFuncPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region ImportedDefaultName domain property code
		
		/// <summary>
		/// ImportedDefaultName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ImportedDefaultNameDomainPropertyId = new global::System.Guid(0x3122c386, 0xbdd3, 0x49ff, 0xa1, 0xef, 0x40, 0xaa, 0xc8, 0xb4, 0x80, 0x3d);
		
		/// <summary>
		/// Storage for ImportedDefaultName
		/// </summary>
		private global::System.String importedDefaultNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ImportedDefaultName domain property.
		/// The imported database default name
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/ImportedDefaultName.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/ImportedDefaultName.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("3122c386-bdd3-49ff-a1ef-40aac8b4803d")]
		public virtual global::System.String ImportedDefaultName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return importedDefaultNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ImportedDefaultNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.ImportedDefaultName domain property.
		/// </summary>
		internal sealed partial class ImportedDefaultNamePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.String>
		{
			private ImportedDefaultNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.ImportedDefaultName domain property value handler.
			/// </summary>
			public static readonly ImportedDefaultNamePropertyHandler Instance = new ImportedDefaultNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.ImportedDefaultName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ImportedDefaultNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ImportedDefaultName;
				//return element.GetValue<global::System.String>("ImportedDefaultName", element.importedDefaultNamePropertyStorage);
				//return element.importedDefaultNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.importedDefaultNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Obsolete domain property code
		
		/// <summary>
		/// Obsolete domain property Id.
		/// </summary>
		public static readonly global::System.Guid ObsoleteDomainPropertyId = new global::System.Guid(0xe798fdc7, 0x2666, 0x435a, 0xbf, 0x56, 0x5f, 0x4d, 0x16, 0x13, 0x97, 0x4e);
		
		/// <summary>
		/// Storage for Obsolete
		/// </summary>
		private global::System.Boolean obsoletePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Obsolete domain property.
		/// Determines if this property should create a compiler warning
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Field/Obsolete.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Field/Obsolete.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Field/Obsolete.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("e798fdc7-2666-435a-bf56-5f4d1613974e")]
		public virtual global::System.Boolean Obsolete
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return obsoletePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ObsoletePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Field.Obsolete domain property.
		/// </summary>
		internal sealed partial class ObsoletePropertyHandler : DslModeling::DomainPropertyValueHandler<FieldBase, global::System.Boolean>
		{
			private ObsoletePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Field.Obsolete domain property value handler.
			/// </summary>
			public static readonly ObsoletePropertyHandler Instance = new ObsoletePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Field.Obsolete domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ObsoleteDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(FieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Obsolete;
				//return element.GetValue<global::System.Boolean>("Obsolete", element.obsoletePropertyStorage);
				//return element.obsoletePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(FieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.obsoletePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Field"));
				}
			}
		}
		
		#endregion
		#region Entity opposite domain role accessor
		/// <summary>
		/// Gets or sets Entity.
		/// </summary>
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate.Dsl.EntityHasFields.FieldDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate.Dsl.EntityHasFields.FieldDomainRoleId, value);
			}
		}
		#endregion
	}
	/// <summary>
	/// DomainClass Field
	/// This is a field in a database table
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class Field : FieldBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public Field(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public Field(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass View
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.View.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.View.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("fcb76b2a-6488-4578-a99b-451bd16ff1b8")]
	public abstract partial class ViewBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// View domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfcb76b2a, 0x6488, 0x4578, 0xa9, 0x9b, 0x45, 0x1b, 0xd1, 0x6f, 0xf1, 0xb8);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ViewBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SQL domain property code
		
		/// <summary>
		/// SQL domain property Id.
		/// </summary>
		public static readonly global::System.Guid SQLDomainPropertyId = new global::System.Guid(0x1b837a3a, 0xd7a9, 0x4fe4, 0x89, 0x7b, 0xf0, 0xb6, 0x9b, 0x89, 0xf6, 0x4e);
		
		/// <summary>
		/// Storage for SQL
		/// </summary>
		private global::System.String sQLPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SQL domain property.
		/// Determines SQL statement used to create the database view object
		/// </summary>
		[System.ComponentModel.Editor(typeof(nHydrate.Dsl.Design.Editors.SQLEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate.Dsl.View/SQL.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.View/SQL.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.View/SQL.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1b837a3a-d7a9-4fe4-897b-f0b69b89f64e")]
		public virtual global::System.String SQL
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sQLPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SQLPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.SQL domain property.
		/// </summary>
		internal sealed partial class SQLPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewBase, global::System.String>
		{
			private SQLPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.SQL domain property value handler.
			/// </summary>
			public static readonly SQLPropertyHandler Instance = new SQLPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.SQL domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SQLDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.SQL;
				//return element.GetValue<global::System.String>("SQL", element.sQLPropertyStorage);
				//return element.sQLPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sQLPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("View"));
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x270471bd, 0x00cc, 0x4dae, 0xb6, 0xd2, 0x02, 0x53, 0xf4, 0x27, 0x08, 0xa4);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Determines the name of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.View/Name.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.View/Name.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.View/Name.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("270471bd-00cc-4dae-b6d2-0253f42708a4")]
		public virtual global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Name;
				//return element.GetValue<global::System.String>("Name", element.namePropertyStorage);
				//return element.namePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("View"));
				}
			}
		}
		
		#endregion
		#region CodeFacade domain property code
		
		/// <summary>
		/// CodeFacade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeFacadeDomainPropertyId = new global::System.Guid(0xb955fb42, 0x785a, 0x4b07, 0x80, 0xfd, 0x9b, 0x5d, 0xc8, 0x16, 0xcb, 0x14);
		
		/// <summary>
		/// Storage for CodeFacade
		/// </summary>
		private global::System.String codeFacadePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CodeFacade domain property.
		/// Determines the object name used in the API. If this property is blank the 'Name'
		/// property is used in the API. This property can be used to mask the database
		/// identifier.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.View/CodeFacade.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.View/CodeFacade.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.View/CodeFacade.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("b955fb42-785a-4b07-80fd-9b5dc816cb14")]
		public virtual global::System.String CodeFacade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeFacadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeFacadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.CodeFacade domain property.
		/// </summary>
		internal sealed partial class CodeFacadePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewBase, global::System.String>
		{
			private CodeFacadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.CodeFacade domain property value handler.
			/// </summary>
			public static readonly CodeFacadePropertyHandler Instance = new CodeFacadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.CodeFacade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeFacadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CodeFacade;
				//return element.GetValue<global::System.String>("CodeFacade", element.codeFacadePropertyStorage);
				//return element.codeFacadePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeFacadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("View"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x794adbbd, 0x5a98, 0x4ee5, 0xb2, 0x2c, 0x77, 0xc5, 0x16, 0x85, 0x67, 0x61);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines the summary of this object
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate.Dsl.View/Summary.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.View/Summary.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.View/Summary.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("794adbbd-5a98-4ee5-b22c-77c516856761")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("View"));
				}
			}
		}
		
		#endregion
		#region Schema domain property code
		
		/// <summary>
		/// Schema domain property Id.
		/// </summary>
		public static readonly global::System.Guid SchemaDomainPropertyId = new global::System.Guid(0x63f73103, 0x5ced, 0x4d51, 0x9c, 0x6c, 0x14, 0x88, 0x06, 0x71, 0x11, 0x62);
		
		/// <summary>
		/// Storage for Schema
		/// </summary>
		private global::System.String schemaPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Schema domain property.
		/// Determines the parent schema for this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.View/Schema.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.View/Schema.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.View/Schema.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("63f73103-5ced-4d51-9c6c-148806711162")]
		public virtual global::System.String Schema
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return schemaPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SchemaPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.Schema domain property.
		/// </summary>
		internal sealed partial class SchemaPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewBase, global::System.String>
		{
			private SchemaPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.Schema domain property value handler.
			/// </summary>
			public static readonly SchemaPropertyHandler Instance = new SchemaPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.Schema domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SchemaDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Schema;
				//return element.GetValue<global::System.String>("Schema", element.schemaPropertyStorage);
				//return element.schemaPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.schemaPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("View"));
				}
			}
		}
		
		#endregion
		#region GeneratesDoubleDerived domain property code
		
		/// <summary>
		/// GeneratesDoubleDerived domain property Id.
		/// </summary>
		public static readonly global::System.Guid GeneratesDoubleDerivedDomainPropertyId = new global::System.Guid(0xdfeb167d, 0xe6f0, 0x4275, 0xa8, 0x26, 0x83, 0xac, 0x31, 0x4d, 0x81, 0x4f);
		
		/// <summary>
		/// Storage for GeneratesDoubleDerived
		/// </summary>
		private global::System.Boolean generatesDoubleDerivedPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of GeneratesDoubleDerived domain property.
		/// If True, will generate both a base class with all functionality and a partial
		/// class to support customization through overrides
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.View/GeneratesDoubleDerived.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.View/GeneratesDoubleDerived.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.View/GeneratesDoubleDerived.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("dfeb167d-e6f0-4275-a826-83ac314d814f")]
		public virtual global::System.Boolean GeneratesDoubleDerived
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return generatesDoubleDerivedPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				GeneratesDoubleDerivedPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the View.GeneratesDoubleDerived domain property.
		/// </summary>
		internal sealed partial class GeneratesDoubleDerivedPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewBase, global::System.Boolean>
		{
			private GeneratesDoubleDerivedPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the View.GeneratesDoubleDerived domain property value handler.
			/// </summary>
			public static readonly GeneratesDoubleDerivedPropertyHandler Instance = new GeneratesDoubleDerivedPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the View.GeneratesDoubleDerived domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return GeneratesDoubleDerivedDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ViewBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.GeneratesDoubleDerived;
				//return element.GetValue<global::System.Boolean>("GeneratesDoubleDerived", element.generatesDoubleDerivedPropertyStorage);
				//return element.generatesDoubleDerivedPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.generatesDoubleDerivedPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("View"));
				}
			}
		}
		
		#endregion
		#region nHydrateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets nHydrateModel.
		/// </summary>
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate.Dsl.nHydrateModelHasViews.ViewDomainRoleId) as nHydrateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate.Dsl.nHydrateModelHasViews.ViewDomainRoleId, value);
			}
		}
		#endregion
		#region Fields opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Fields.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ViewField> Fields
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<ViewField>, ViewField>(global::nHydrate.Dsl.ViewHasFields.ViewDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate.Dsl.ViewField.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::nHydrate.Dsl.ViewField sourceViewField1 = sourceElement as global::nHydrate.Dsl.ViewField;
			if (sourceViewField1 != null)
			{
				// Create link for path ViewHasFields.Fields
				this.Fields.Add(sourceViewField1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::nHydrate.Dsl.ViewField sourceViewField1 = sourceElement as global::nHydrate.Dsl.ViewField;
			if (sourceViewField1 != null)
			{
				// Delete link for path ViewHasFields.Fields
				
				foreach (DslModeling::ElementLink link in global::nHydrate.Dsl.ViewHasFields.GetLinks((global::nHydrate.Dsl.View)this, sourceViewField1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate.Dsl.ViewHasFields.ViewDomainRoleId, global::nHydrate.Dsl.ViewHasFields.ViewFieldDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass View
	/// This is a custom database view
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class View : ViewBase
	{
		#region Constructors
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public View(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public View(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass ViewField
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.ViewField.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.ViewField.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("84ea79b9-c696-4742-873b-6d31ce2ae2fb")]
	public abstract partial class ViewFieldBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// ViewField domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x84ea79b9, 0xc696, 0x4742, 0x87, 0x3b, 0x6d, 0x31, 0xce, 0x2a, 0xe2, 0xfb);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ViewFieldBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x893f6809, 0x7dc3, 0x47ab, 0x8a, 0xfd, 0x8f, 0x3b, 0x0b, 0x0d, 0xf7, 0xaa);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Determines the name of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.ViewField/Name.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.ViewField/Name.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.ViewField/Name.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("893f6809-7dc3-47ab-8afd-8f3b0b0df7aa")]
		public virtual global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Name;
				//return element.GetValue<global::System.String>("Name", element.namePropertyStorage);
				//return element.namePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region Nullable domain property code
		
		/// <summary>
		/// Nullable domain property Id.
		/// </summary>
		public static readonly global::System.Guid NullableDomainPropertyId = new global::System.Guid(0x93151f66, 0x2435, 0x4f5a, 0x8b, 0x8b, 0x0b, 0x57, 0xea, 0x65, 0xe1, 0x2e);
		
		/// <summary>
		/// Storage for Nullable
		/// </summary>
		private global::System.Boolean nullablePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Nullable domain property.
		/// Determines if this item allows null values
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.ViewField/Nullable.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.ViewField/Nullable.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.ViewField/Nullable.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("93151f66-2435-4f5a-8b8b-0b57ea65e12e")]
		public virtual global::System.Boolean Nullable
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nullablePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NullablePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.Nullable domain property.
		/// </summary>
		internal sealed partial class NullablePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, global::System.Boolean>
		{
			private NullablePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.Nullable domain property value handler.
			/// </summary>
			public static readonly NullablePropertyHandler Instance = new NullablePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.Nullable domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NullableDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Nullable;
				//return element.GetValue<global::System.Boolean>("Nullable", element.nullablePropertyStorage);
				//return element.nullablePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.nullablePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region DataType domain property code
		
		/// <summary>
		/// DataType domain property Id.
		/// </summary>
		public static readonly global::System.Guid DataTypeDomainPropertyId = new global::System.Guid(0xafc810ea, 0x82b0, 0x4d4c, 0xba, 0x44, 0x4f, 0xdc, 0x3c, 0x2e, 0x28, 0xc4);
		
		/// <summary>
		/// Storage for DataType
		/// </summary>
		private DataTypeConstants dataTypePropertyStorage = DataTypeConstants.VarChar;
		
		/// <summary>
		/// Gets or sets the value of DataType domain property.
		/// Determines the data type of this field
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate.Dsl.Design.Converters.DatatypeConverter))]
		[DslDesign::DisplayNameResource("nHydrate.Dsl.ViewField/DataType.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.ViewField/DataType.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.ViewField/DataType.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(DataTypeConstants.VarChar)]
		[DslModeling::DomainObjectId("afc810ea-82b0-4d4c-ba44-4fdc3c2e28c4")]
		public virtual DataTypeConstants DataType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return dataTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DataTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.DataType domain property.
		/// </summary>
		internal sealed partial class DataTypePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, DataTypeConstants>
		{
			private DataTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.DataType domain property value handler.
			/// </summary>
			public static readonly DataTypePropertyHandler Instance = new DataTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.DataType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DataTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed DataTypeConstants GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.DataType;
				//return element.GetValue<DataTypeConstants>("DataType", element.dataTypePropertyStorage);
				//return element.dataTypePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, DataTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				DataTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.dataTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region Default domain property code
		
		/// <summary>
		/// Default domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefaultDomainPropertyId = new global::System.Guid(0x53ad9f4d, 0xd0c1, 0x4aaa, 0xb5, 0x49, 0x0b, 0x73, 0xa4, 0x7d, 0xd9, 0x83);
		
		/// <summary>
		/// Storage for Default
		/// </summary>
		private global::System.String defaultPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Default domain property.
		/// Determines the default value of this object
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.ViewField/Default.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.ViewField/Default.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.ViewField/Default.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("53ad9f4d-d0c1-4aaa-b549-0b73a47dd983")]
		public virtual global::System.String Default
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return defaultPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DefaultPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.Default domain property.
		/// </summary>
		internal sealed partial class DefaultPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, global::System.String>
		{
			private DefaultPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.Default domain property value handler.
			/// </summary>
			public static readonly DefaultPropertyHandler Instance = new DefaultPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.Default domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefaultDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Default;
				//return element.GetValue<global::System.String>("Default", element.defaultPropertyStorage);
				//return element.defaultPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.defaultPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0xda986d57, 0x440b, 0x4fbb, 0xaf, 0x35, 0xcb, 0x5c, 0x10, 0x38, 0xf6, 0x9b);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines the summary of this object
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate.Dsl.ViewField/Summary.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.ViewField/Summary.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.ViewField/Summary.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("da986d57-440b-4fbb-af35-cb5c1038f69b")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region Length domain property code
		
		/// <summary>
		/// Length domain property Id.
		/// </summary>
		public static readonly global::System.Guid LengthDomainPropertyId = new global::System.Guid(0x6ab91e23, 0xbe5f, 0x4ff9, 0xb1, 0x97, 0xed, 0xc5, 0xca, 0x1e, 0xa9, 0x70);
		
		/// <summary>
		/// Storage for Length
		/// </summary>
		private global::System.Int32 lengthPropertyStorage = 50;
		
		/// <summary>
		/// Gets or sets the value of Length domain property.
		/// Determines the size of this field in bytes
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate.Dsl.Design.Converters.TextLengthConverter))]
		[DslDesign::DisplayNameResource("nHydrate.Dsl.ViewField/Length.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.ViewField/Length.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.ViewField/Length.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(50)]
		[DslModeling::DomainObjectId("6ab91e23-be5f-4ff9-b197-edc5ca1ea970")]
		public virtual global::System.Int32 Length
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return lengthPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				LengthPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.Length domain property.
		/// </summary>
		internal sealed partial class LengthPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, global::System.Int32>
		{
			private LengthPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.Length domain property value handler.
			/// </summary>
			public static readonly LengthPropertyHandler Instance = new LengthPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.Length domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return LengthDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Length;
				//return element.GetValue<global::System.Int32>("Length", element.lengthPropertyStorage);
				//return element.lengthPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.lengthPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region Scale domain property code
		
		/// <summary>
		/// Scale domain property Id.
		/// </summary>
		public static readonly global::System.Guid ScaleDomainPropertyId = new global::System.Guid(0x2ea4b05a, 0x3fa9, 0x4cee, 0x89, 0x5e, 0x57, 0xcd, 0xf0, 0x05, 0x79, 0xf7);
		
		/// <summary>
		/// Storage for Scale
		/// </summary>
		private global::System.Int32 scalePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Scale domain property.
		/// Determines the scale of some data types
		/// </summary>
		[System.ComponentModel.TypeConverter(typeof(nHydrate.Dsl.Design.Converters.TextDecimalScaleConverter))]
		[DslDesign::DisplayNameResource("nHydrate.Dsl.ViewField/Scale.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.ViewField/Scale.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.ViewField/Scale.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2ea4b05a-3fa9-4cee-895e-57cdf00579f7")]
		public virtual global::System.Int32 Scale
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return scalePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ScalePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.Scale domain property.
		/// </summary>
		internal sealed partial class ScalePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, global::System.Int32>
		{
			private ScalePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.Scale domain property value handler.
			/// </summary>
			public static readonly ScalePropertyHandler Instance = new ScalePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.Scale domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ScaleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Scale;
				//return element.GetValue<global::System.Int32>("Scale", element.scalePropertyStorage);
				//return element.scalePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.scalePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region CodeFacade domain property code
		
		/// <summary>
		/// CodeFacade domain property Id.
		/// </summary>
		public static readonly global::System.Guid CodeFacadeDomainPropertyId = new global::System.Guid(0x7afe7e0d, 0x867c, 0x4db3, 0xaa, 0xe3, 0xad, 0xb3, 0xf4, 0xbd, 0x84, 0x8e);
		
		/// <summary>
		/// Storage for CodeFacade
		/// </summary>
		private global::System.String codeFacadePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of CodeFacade domain property.
		/// Determines the object name used in the API. If this property is blank the 'Name'
		/// property is used in the API. This property can be used to mask the database
		/// identifier.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.ViewField/CodeFacade.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.ViewField/CodeFacade.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.ViewField/CodeFacade.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("7afe7e0d-867c-4db3-aae3-adb3f4bd848e")]
		public virtual global::System.String CodeFacade
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return codeFacadePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				CodeFacadePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.CodeFacade domain property.
		/// </summary>
		internal sealed partial class CodeFacadePropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, global::System.String>
		{
			private CodeFacadePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.CodeFacade domain property value handler.
			/// </summary>
			public static readonly CodeFacadePropertyHandler Instance = new CodeFacadePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.CodeFacade domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return CodeFacadeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.CodeFacade;
				//return element.GetValue<global::System.String>("CodeFacade", element.codeFacadePropertyStorage);
				//return element.codeFacadePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.codeFacadePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region IsPrimaryKey domain property code
		
		/// <summary>
		/// IsPrimaryKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsPrimaryKeyDomainPropertyId = new global::System.Guid(0x19ed1bb4, 0x66f1, 0x40a0, 0x93, 0x95, 0x53, 0x21, 0x8e, 0x4d, 0xbe, 0x17);
		
		/// <summary>
		/// Storage for IsPrimaryKey
		/// </summary>
		private global::System.Boolean isPrimaryKeyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsPrimaryKey domain property.
		/// Determine if this field is the entity primary key
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.ViewField/IsPrimaryKey.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.ViewField/IsPrimaryKey.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.ViewField/IsPrimaryKey.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("19ed1bb4-66f1-40a0-9395-53218e4dbe17")]
		public virtual global::System.Boolean IsPrimaryKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isPrimaryKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsPrimaryKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ViewField.IsPrimaryKey domain property.
		/// </summary>
		internal sealed partial class IsPrimaryKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<ViewFieldBase, global::System.Boolean>
		{
			private IsPrimaryKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ViewField.IsPrimaryKey domain property value handler.
			/// </summary>
			public static readonly IsPrimaryKeyPropertyHandler Instance = new IsPrimaryKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ViewField.IsPrimaryKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsPrimaryKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ViewFieldBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsPrimaryKey;
				//return element.GetValue<global::System.Boolean>("IsPrimaryKey", element.isPrimaryKeyPropertyStorage);
				//return element.isPrimaryKeyPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ViewFieldBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isPrimaryKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ViewField"));
				}
			}
		}
		
		#endregion
		#region View opposite domain role accessor
		/// <summary>
		/// Gets or sets View.
		/// </summary>
		public virtual View View
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate.Dsl.ViewHasFields.ViewFieldDomainRoleId) as View;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate.Dsl.ViewHasFields.ViewFieldDomainRoleId, value);
			}
		}
		#endregion
	}
	/// <summary>
	/// DomainClass ViewField
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class ViewField : ViewFieldBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public ViewField(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public ViewField(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// DomainClass RelationField
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.RelationField.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.RelationField.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("fddfb133-1223-4aed-8861-2d4c0553e79a")]
	public partial class RelationField : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// RelationField domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfddfb133, 0x1223, 0x4aed, 0x88, 0x61, 0x2d, 0x4c, 0x05, 0x53, 0xe7, 0x9a);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RelationField(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public RelationField(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SourceFieldId domain property code
		
		/// <summary>
		/// SourceFieldId domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceFieldIdDomainPropertyId = new global::System.Guid(0xbabfbaaa, 0xebc3, 0x4b53, 0x9e, 0xd8, 0x5e, 0x7b, 0x5a, 0x2c, 0xd6, 0xa0);
		
		/// <summary>
		/// Storage for SourceFieldId
		/// </summary>
		private global::System.Guid sourceFieldIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SourceFieldId domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.RelationField/SourceFieldId.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.RelationField/SourceFieldId.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("babfbaaa-ebc3-4b53-9ed8-5e7b5a2cd6a0")]
		public virtual global::System.Guid SourceFieldId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceFieldIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceFieldIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RelationField.SourceFieldId domain property.
		/// </summary>
		internal sealed partial class SourceFieldIdPropertyHandler : DslModeling::DomainPropertyValueHandler<RelationField, global::System.Guid>
		{
			private SourceFieldIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RelationField.SourceFieldId domain property value handler.
			/// </summary>
			public static readonly SourceFieldIdPropertyHandler Instance = new SourceFieldIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RelationField.SourceFieldId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceFieldIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(RelationField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.SourceFieldId;
				//return element.GetValue<global::System.Guid>("SourceFieldId", element.sourceFieldIdPropertyStorage);
				//return element.sourceFieldIdPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RelationField element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceFieldIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RelationField"));
				}
			}
		}
		
		#endregion
		#region TargetFieldId domain property code
		
		/// <summary>
		/// TargetFieldId domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetFieldIdDomainPropertyId = new global::System.Guid(0x34a6d2cf, 0xfc80, 0x4e78, 0x95, 0x99, 0xbd, 0x82, 0x16, 0x17, 0x52, 0xc1);
		
		/// <summary>
		/// Storage for TargetFieldId
		/// </summary>
		private global::System.Guid targetFieldIdPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of TargetFieldId domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.RelationField/TargetFieldId.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.RelationField/TargetFieldId.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("34a6d2cf-fc80-4e78-9599-bd82161752c1")]
		public virtual global::System.Guid TargetFieldId
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetFieldIdPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetFieldIdPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RelationField.TargetFieldId domain property.
		/// </summary>
		internal sealed partial class TargetFieldIdPropertyHandler : DslModeling::DomainPropertyValueHandler<RelationField, global::System.Guid>
		{
			private TargetFieldIdPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RelationField.TargetFieldId domain property value handler.
			/// </summary>
			public static readonly TargetFieldIdPropertyHandler Instance = new TargetFieldIdPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RelationField.TargetFieldId domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetFieldIdDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(RelationField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.TargetFieldId;
				//return element.GetValue<global::System.Guid>("TargetFieldId", element.targetFieldIdPropertyStorage);
				//return element.targetFieldIdPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RelationField element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetFieldIdPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RelationField"));
				}
			}
		}
		
		#endregion
		#region RelationID domain property code
		
		/// <summary>
		/// RelationID domain property Id.
		/// </summary>
		public static readonly global::System.Guid RelationIDDomainPropertyId = new global::System.Guid(0xdae4f7d7, 0xb925, 0x4215, 0x9d, 0xec, 0xd8, 0x11, 0x82, 0xa7, 0x44, 0xa4);
		
		/// <summary>
		/// Storage for RelationID
		/// </summary>
		private global::System.Guid relationIDPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of RelationID domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.RelationField/RelationID.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.RelationField/RelationID.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("dae4f7d7-b925-4215-9dec-d81182a744a4")]
		public virtual global::System.Guid RelationID
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return relationIDPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RelationIDPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the RelationField.RelationID domain property.
		/// </summary>
		internal sealed partial class RelationIDPropertyHandler : DslModeling::DomainPropertyValueHandler<RelationField, global::System.Guid>
		{
			private RelationIDPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the RelationField.RelationID domain property value handler.
			/// </summary>
			public static readonly RelationIDPropertyHandler Instance = new RelationIDPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the RelationField.RelationID domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RelationIDDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(RelationField element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.RelationID;
				//return element.GetValue<global::System.Guid>("RelationID", element.relationIDPropertyStorage);
				//return element.relationIDPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(RelationField element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.relationIDPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RelationField"));
				}
			}
		}
		
		#endregion
		#region nHydrateModel opposite domain role accessor
		/// <summary>
		/// Gets or sets nHydrateModel.
		/// </summary>
		public virtual nHydrateModel nHydrateModel
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate.Dsl.nHydrateModelHasRelationFields.RelationFieldDomainRoleId) as nHydrateModel;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate.Dsl.nHydrateModelHasRelationFields.RelationFieldDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// DomainClass StaticData
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.StaticData.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.StaticData.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("30d62f0d-4b1e-4c95-b75b-c2b775dd98a3")]
	public partial class StaticData : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// StaticData domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x30d62f0d, 0x4b1e, 0x4c95, 0xb7, 0x5b, 0xc2, 0xb7, 0x75, 0xdd, 0x98, 0xa3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StaticData(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public StaticData(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ColumnKey domain property code
		
		/// <summary>
		/// ColumnKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid ColumnKeyDomainPropertyId = new global::System.Guid(0x268d4928, 0xffa6, 0x46ca, 0x95, 0x58, 0xb2, 0xa2, 0x8b, 0x04, 0xf8, 0xc0);
		
		/// <summary>
		/// Storage for ColumnKey
		/// </summary>
		private global::System.Guid columnKeyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ColumnKey domain property.
		/// The column identifier for the field value
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.StaticData/ColumnKey.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.StaticData/ColumnKey.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("268d4928-ffa6-46ca-9558-b2a28b04f8c0")]
		public virtual global::System.Guid ColumnKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return columnKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ColumnKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StaticData.ColumnKey domain property.
		/// </summary>
		internal sealed partial class ColumnKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<StaticData, global::System.Guid>
		{
			private ColumnKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StaticData.ColumnKey domain property value handler.
			/// </summary>
			public static readonly ColumnKeyPropertyHandler Instance = new ColumnKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StaticData.ColumnKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ColumnKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(StaticData element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ColumnKey;
				//return element.GetValue<global::System.Guid>("ColumnKey", element.columnKeyPropertyStorage);
				//return element.columnKeyPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StaticData element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.columnKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StaticData"));
				}
			}
		}
		
		#endregion
		#region Value domain property code
		
		/// <summary>
		/// Value domain property Id.
		/// </summary>
		public static readonly global::System.Guid ValueDomainPropertyId = new global::System.Guid(0x510965ae, 0xaa88, 0x4c1f, 0xa8, 0x0b, 0xba, 0xb4, 0x22, 0x00, 0x31, 0x78);
		
		/// <summary>
		/// Storage for Value
		/// </summary>
		private global::System.String valuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Value domain property.
		/// The value for this column in the current record
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.StaticData/Value.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.StaticData/Value.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("510965ae-aa88-4c1f-a80b-bab422003178")]
		public virtual global::System.String Value
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return valuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StaticData.Value domain property.
		/// </summary>
		internal sealed partial class ValuePropertyHandler : DslModeling::DomainPropertyValueHandler<StaticData, global::System.String>
		{
			private ValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StaticData.Value domain property value handler.
			/// </summary>
			public static readonly ValuePropertyHandler Instance = new ValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StaticData.Value domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(StaticData element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Value;
				//return element.GetValue<global::System.String>("Value", element.valuePropertyStorage);
				//return element.valuePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StaticData element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.valuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StaticData"));
				}
			}
		}
		
		#endregion
		#region OrderKey domain property code
		
		/// <summary>
		/// OrderKey domain property Id.
		/// </summary>
		public static readonly global::System.Guid OrderKeyDomainPropertyId = new global::System.Guid(0xb57e8a0c, 0xdc79, 0x41ef, 0x88, 0x35, 0x91, 0x15, 0xb5, 0xcb, 0x66, 0xf0);
		
		/// <summary>
		/// Storage for OrderKey
		/// </summary>
		private global::System.Int32 orderKeyPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of OrderKey domain property.
		/// The record number [1..N]
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.StaticData/OrderKey.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.StaticData/OrderKey.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("b57e8a0c-dc79-41ef-8835-9115b5cb66f0")]
		public virtual global::System.Int32 OrderKey
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return orderKeyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				OrderKeyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the StaticData.OrderKey domain property.
		/// </summary>
		internal sealed partial class OrderKeyPropertyHandler : DslModeling::DomainPropertyValueHandler<StaticData, global::System.Int32>
		{
			private OrderKeyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the StaticData.OrderKey domain property value handler.
			/// </summary>
			public static readonly OrderKeyPropertyHandler Instance = new OrderKeyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the StaticData.OrderKey domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return OrderKeyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(StaticData element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.OrderKey;
				//return element.GetValue<global::System.Int32>("OrderKey", element.orderKeyPropertyStorage);
				//return element.orderKeyPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(StaticData element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.orderKeyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("StaticData"));
				}
			}
		}
		
		#endregion
		#region Entity opposite domain role accessor
		/// <summary>
		/// Gets or sets Entity.
		/// </summary>
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate.Dsl.EntityHasStaticDatum.StaticDataDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate.Dsl.EntityHasStaticDatum.StaticDataDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass Index
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.Index.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.Index.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("ced4ceba-e07d-4396-b2fe-a981c60933d0")]
	public abstract partial class IndexBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// Index domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xced4ceba, 0xe07d, 0x4396, 0xb2, 0xfe, 0xa9, 0x81, 0xc6, 0x09, 0x33, 0xd0);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected IndexBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ParentEntityID domain property code
		
		/// <summary>
		/// ParentEntityID domain property Id.
		/// </summary>
		public static readonly global::System.Guid ParentEntityIDDomainPropertyId = new global::System.Guid(0xa8689c72, 0x62db, 0x4c31, 0x8f, 0x4e, 0xa6, 0x5b, 0x2e, 0xd9, 0x7c, 0xea);
		
		/// <summary>
		/// Storage for ParentEntityID
		/// </summary>
		private global::System.Guid parentEntityIDPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of ParentEntityID domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Index/ParentEntityID.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Index/ParentEntityID.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Index/ParentEntityID.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("a8689c72-62db-4c31-8f4e-a65b2ed97cea")]
		public virtual global::System.Guid ParentEntityID
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return parentEntityIDPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ParentEntityIDPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Index.ParentEntityID domain property.
		/// </summary>
		internal sealed partial class ParentEntityIDPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexBase, global::System.Guid>
		{
			private ParentEntityIDPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Index.ParentEntityID domain property value handler.
			/// </summary>
			public static readonly ParentEntityIDPropertyHandler Instance = new ParentEntityIDPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Index.ParentEntityID domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ParentEntityIDDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(IndexBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ParentEntityID;
				//return element.GetValue<global::System.Guid>("ParentEntityID", element.parentEntityIDPropertyStorage);
				//return element.parentEntityIDPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexBase element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.parentEntityIDPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Index"));
				}
			}
		}
		
		#endregion
		#region IsUnique domain property code
		
		/// <summary>
		/// IsUnique domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsUniqueDomainPropertyId = new global::System.Guid(0x9aa19f49, 0xa18d, 0x4c03, 0x9b, 0x2c, 0x88, 0xa9, 0x15, 0x05, 0xf4, 0xbe);
		
		/// <summary>
		/// Storage for IsUnique
		/// </summary>
		private global::System.Boolean isUniquePropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsUnique domain property.
		/// Determines if this index is unique
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Index/IsUnique.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Index/IsUnique.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Index/IsUnique.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9aa19f49-a18d-4c03-9b2c-88a91505f4be")]
		public virtual global::System.Boolean IsUnique
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isUniquePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsUniquePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Index.IsUnique domain property.
		/// </summary>
		internal sealed partial class IsUniquePropertyHandler : DslModeling::DomainPropertyValueHandler<IndexBase, global::System.Boolean>
		{
			private IsUniquePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Index.IsUnique domain property value handler.
			/// </summary>
			public static readonly IsUniquePropertyHandler Instance = new IsUniquePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Index.IsUnique domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsUniqueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(IndexBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IsUnique;
				//return element.GetValue<global::System.Boolean>("IsUnique", element.isUniquePropertyStorage);
				//return element.isUniquePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isUniquePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Index"));
				}
			}
		}
		
		#endregion
		#region Summary domain property code
		
		/// <summary>
		/// Summary domain property Id.
		/// </summary>
		public static readonly global::System.Guid SummaryDomainPropertyId = new global::System.Guid(0x9d97280c, 0x8b06, 0x435d, 0x9a, 0x01, 0xe7, 0xe3, 0x4c, 0x72, 0xcf, 0x2a);
		
		/// <summary>
		/// Storage for Summary
		/// </summary>
		private global::System.String summaryPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Summary domain property.
		/// Determines the summary of this object
		/// </summary>
		[System.ComponentModel.Editor(typeof(System.ComponentModel.Design.MultilineStringEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Index/Summary.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Index/Summary.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Index/Summary.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("9d97280c-8b06-435d-9a01-e7e34c72cf2a")]
		public virtual global::System.String Summary
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return summaryPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SummaryPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Index.Summary domain property.
		/// </summary>
		internal sealed partial class SummaryPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexBase, global::System.String>
		{
			private SummaryPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Index.Summary domain property value handler.
			/// </summary>
			public static readonly SummaryPropertyHandler Instance = new SummaryPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Index.Summary domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SummaryDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IndexBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Summary;
				//return element.GetValue<global::System.String>("Summary", element.summaryPropertyStorage);
				//return element.summaryPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.summaryPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Index"));
				}
			}
		}
		
		#endregion
		#region Definition domain property code
		
		/// <summary>
		/// Definition domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionDomainPropertyId = new global::System.Guid(0xe48ef865, 0xb8c9, 0x461e, 0x89, 0x74, 0x4f, 0xb8, 0x6a, 0x0f, 0x72, 0x84);
		
		/// <summary>
		/// Storage for Definition
		/// </summary>
		private global::System.String definitionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Definition domain property.
		/// The columns in the index
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Index/Definition.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Index/Definition.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Index/Definition.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("e48ef865-b8c9-461e-8974-4fb86a0f7284")]
		public virtual global::System.String Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return definitionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			private set
			{
				DefinitionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Index.Definition domain property.
		/// </summary>
		internal sealed partial class DefinitionPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexBase, global::System.String>
		{
			private DefinitionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Index.Definition domain property value handler.
			/// </summary>
			public static readonly DefinitionPropertyHandler Instance = new DefinitionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Index.Definition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefinitionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IndexBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Definition;
				//return element.GetValue<global::System.String>("Definition", element.definitionPropertyStorage);
				//return element.definitionPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.definitionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Index"));
				}
			}
		}
		
		#endregion
		#region IndexType domain property code
		
		/// <summary>
		/// IndexType domain property Id.
		/// </summary>
		public static readonly global::System.Guid IndexTypeDomainPropertyId = new global::System.Guid(0x071e2916, 0x81d3, 0x4102, 0xa4, 0xab, 0xce, 0xe0, 0x18, 0x81, 0x88, 0x9b);
		
		/// <summary>
		/// Storage for IndexType
		/// </summary>
		private IndexTypeConstants indexTypePropertyStorage = IndexTypeConstants.User;
		
		/// <summary>
		/// Gets or sets the value of IndexType domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Index/IndexType.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Index/IndexType.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(IndexTypeConstants.User)]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("071e2916-81d3-4102-a4ab-cee01881889b")]
		public virtual IndexTypeConstants IndexType
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return indexTypePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IndexTypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Index.IndexType domain property.
		/// </summary>
		internal sealed partial class IndexTypePropertyHandler : DslModeling::DomainPropertyValueHandler<IndexBase, IndexTypeConstants>
		{
			private IndexTypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Index.IndexType domain property value handler.
			/// </summary>
			public static readonly IndexTypePropertyHandler Instance = new IndexTypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Index.IndexType domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IndexTypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed IndexTypeConstants GetValue(IndexBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.IndexType;
				//return element.GetValue<IndexTypeConstants>("IndexType", element.indexTypePropertyStorage);
				//return element.indexTypePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexBase element, IndexTypeConstants newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				IndexTypeConstants oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.indexTypePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Index"));
				}
			}
		}
		
		#endregion
		#region ImportedName domain property code
		
		/// <summary>
		/// ImportedName domain property Id.
		/// </summary>
		public static readonly global::System.Guid ImportedNameDomainPropertyId = new global::System.Guid(0xb581adbf, 0x990b, 0x4bdf, 0x86, 0xa8, 0x05, 0x60, 0xd2, 0x60, 0x64, 0xc0);
		
		/// <summary>
		/// Storage for ImportedName
		/// </summary>
		private global::System.String importedNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of ImportedName domain property.
		/// The original name imported from database
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Index/ImportedName.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Index/ImportedName.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("b581adbf-990b-4bdf-86a8-0560d26064c0")]
		public virtual global::System.String ImportedName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return importedNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ImportedNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Index.ImportedName domain property.
		/// </summary>
		internal sealed partial class ImportedNamePropertyHandler : DslModeling::DomainPropertyValueHandler<IndexBase, global::System.String>
		{
			private ImportedNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Index.ImportedName domain property value handler.
			/// </summary>
			public static readonly ImportedNamePropertyHandler Instance = new ImportedNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Index.ImportedName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ImportedNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IndexBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.ImportedName;
				//return element.GetValue<global::System.String>("ImportedName", element.importedNamePropertyStorage);
				//return element.importedNamePropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.importedNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Index"));
				}
			}
		}
		
		#endregion
		#region Clustered domain property code
		
		/// <summary>
		/// Clustered domain property Id.
		/// </summary>
		public static readonly global::System.Guid ClusteredDomainPropertyId = new global::System.Guid(0x075c5cd6, 0x2db6, 0x4112, 0x91, 0x4b, 0x64, 0x5d, 0xe3, 0xf7, 0x50, 0x7a);
		
		/// <summary>
		/// Storage for Clustered
		/// </summary>
		private global::System.Boolean clusteredPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of Clustered domain property.
		/// Create this a a clustered index
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.Index/Clustered.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.Index/Clustered.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.Index/Clustered.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("075c5cd6-2db6-4112-914b-645de3f7507a")]
		public virtual global::System.Boolean Clustered
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return clusteredPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ClusteredPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Index.Clustered domain property.
		/// </summary>
		internal sealed partial class ClusteredPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexBase, global::System.Boolean>
		{
			private ClusteredPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Index.Clustered domain property value handler.
			/// </summary>
			public static readonly ClusteredPropertyHandler Instance = new ClusteredPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Index.Clustered domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ClusteredDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(IndexBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Clustered;
				//return element.GetValue<global::System.Boolean>("Clustered", element.clusteredPropertyStorage);
				//return element.clusteredPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.clusteredPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Index"));
				}
			}
		}
		
		#endregion
		#region Entity opposite domain role accessor
		/// <summary>
		/// Gets or sets Entity.
		/// </summary>
		public virtual Entity Entity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate.Dsl.EntityHasIndexes.IndexDomainRoleId) as Entity;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate.Dsl.EntityHasIndexes.IndexDomainRoleId, value);
			}
		}
		#endregion
		#region IndexColumns opposite domain role accessor
		
		/// <summary>
		/// Gets a list of IndexColumns.
		/// Description for nHydrate.Dsl.IndexHasIndexColumns.Index
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<IndexColumn> IndexColumns
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<IndexColumn>, IndexColumn>(global::nHydrate.Dsl.IndexHasIndexColumns.IndexDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::nHydrate.Dsl.IndexColumn.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::nHydrate.Dsl.IndexColumn sourceIndexColumn1 = sourceElement as global::nHydrate.Dsl.IndexColumn;
			if (sourceIndexColumn1 != null)
			{
				// Create link for path IndexHasIndexColumns.IndexColumns
				this.IndexColumns.Add(sourceIndexColumn1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::nHydrate.Dsl.IndexColumn sourceIndexColumn1 = sourceElement as global::nHydrate.Dsl.IndexColumn;
			if (sourceIndexColumn1 != null)
			{
				// Delete link for path IndexHasIndexColumns.IndexColumns
				
				foreach (DslModeling::ElementLink link in global::nHydrate.Dsl.IndexHasIndexColumns.GetLinks((global::nHydrate.Dsl.Index)this, sourceIndexColumn1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::nHydrate.Dsl.IndexHasIndexColumns.IndexDomainRoleId, global::nHydrate.Dsl.IndexHasIndexColumns.IndexColumnDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
	/// <summary>
	/// DomainClass Index
	/// A defined index for an entity
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class Index : IndexBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public Index(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public Index(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// Double-derived base class for DomainClass IndexColumn
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.IndexColumn.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.IndexColumn.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::nHydrate.Dsl.nHydrateDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("06e94c72-d866-4c92-b5a9-624fdbebdf9e")]
	public abstract partial class IndexColumnBase : DslModeling::ModelElement, System.ComponentModel.INotifyPropertyChanged
	{
		#region INotifyPropertyChanged
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
		protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
		{
			if (this.PropertyChanged != null)
				this.PropertyChanged(this, e);
		}
		#endregion
	
		#region Constructors, domain class Id
	
		/// <summary>
		/// IndexColumn domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x06e94c72, 0xd866, 0x4c92, 0xb5, 0xa9, 0x62, 0x4f, 0xdb, 0xeb, 0xdf, 0x9e);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected IndexColumnBase(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region FieldID domain property code
		
		/// <summary>
		/// FieldID domain property Id.
		/// </summary>
		public static readonly global::System.Guid FieldIDDomainPropertyId = new global::System.Guid(0xa34ec5ca, 0xd4d4, 0x4fc6, 0x89, 0x38, 0x47, 0x3c, 0x73, 0xde, 0x49, 0x98);
		
		/// <summary>
		/// Storage for FieldID
		/// </summary>
		private global::System.Guid fieldIDPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of FieldID domain property.
		/// The referenced entity field
		/// </summary>
		[System.ComponentModel.Editor(typeof(nHydrate.Dsl.Design.Editors.EntityFieldEditor), typeof(System.Drawing.Design.UITypeEditor))]
		[System.ComponentModel.TypeConverter(typeof(nHydrate.Dsl.Design.Converters.EntityFieldConverter))]
		[DslDesign::DisplayNameResource("nHydrate.Dsl.IndexColumn/FieldID.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.IndexColumn/FieldID.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.IndexColumn/FieldID.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a34ec5ca-d4d4-4fc6-8938-473c73de4998")]
		public virtual global::System.Guid FieldID
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return fieldIDPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				FieldIDPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IndexColumn.FieldID domain property.
		/// </summary>
		internal sealed partial class FieldIDPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexColumnBase, global::System.Guid>
		{
			private FieldIDPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IndexColumn.FieldID domain property value handler.
			/// </summary>
			public static readonly FieldIDPropertyHandler Instance = new FieldIDPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IndexColumn.FieldID domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return FieldIDDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Guid GetValue(IndexColumnBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.FieldID;
				//return element.GetValue<global::System.Guid>("FieldID", element.fieldIDPropertyStorage);
				//return element.fieldIDPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexColumnBase element, global::System.Guid newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Guid oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.fieldIDPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("IndexColumn"));
				}
			}
		}
		
		#endregion
		#region Ascending domain property code
		
		/// <summary>
		/// Ascending domain property Id.
		/// </summary>
		public static readonly global::System.Guid AscendingDomainPropertyId = new global::System.Guid(0xd203b5ed, 0x1826, 0x4ce0, 0xab, 0x66, 0x0b, 0x9c, 0x0b, 0x65, 0xd0, 0xfb);
		
		/// <summary>
		/// Storage for Ascending
		/// </summary>
		private global::System.Boolean ascendingPropertyStorage = true;
		
		/// <summary>
		/// Gets or sets the value of Ascending domain property.
		/// Determines if this column is indexed in ascending order
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.IndexColumn/Ascending.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::CategoryResource("nHydrate.Dsl.IndexColumn/Ascending.Category", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.IndexColumn/Ascending.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(true)]
		[DslModeling::DomainObjectId("d203b5ed-1826-4ce0-ab66-0b9c0b65d0fb")]
		public virtual global::System.Boolean Ascending
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return ascendingPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				AscendingPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IndexColumn.Ascending domain property.
		/// </summary>
		internal sealed partial class AscendingPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexColumnBase, global::System.Boolean>
		{
			private AscendingPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IndexColumn.Ascending domain property value handler.
			/// </summary>
			public static readonly AscendingPropertyHandler Instance = new AscendingPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IndexColumn.Ascending domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return AscendingDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(IndexColumnBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Ascending;
				//return element.GetValue<global::System.Boolean>("Ascending", element.ascendingPropertyStorage);
				//return element.ascendingPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexColumnBase element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.ascendingPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("IndexColumn"));
				}
			}
		}
		
		#endregion
		#region Definition domain property code
		
		/// <summary>
		/// Definition domain property Id.
		/// </summary>
		public static readonly global::System.Guid DefinitionDomainPropertyId = new global::System.Guid(0x390d4ff4, 0xe3d9, 0x4ca5, 0x92, 0xa4, 0xc4, 0x10, 0xf4, 0x80, 0x8b, 0xbb);
		
		/// <summary>
		/// Storage for Definition
		/// </summary>
		private global::System.String definitionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Definition domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.IndexColumn/Definition.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.IndexColumn/Definition.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[global::System.ComponentModel.ReadOnly(true)]
		[DslModeling::DomainObjectId("390d4ff4-e3d9-4ca5-92a4-c410f4808bbb")]
		public virtual global::System.String Definition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return definitionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			private set
			{
				DefinitionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IndexColumn.Definition domain property.
		/// </summary>
		internal sealed partial class DefinitionPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexColumnBase, global::System.String>
		{
			private DefinitionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IndexColumn.Definition domain property value handler.
			/// </summary>
			public static readonly DefinitionPropertyHandler Instance = new DefinitionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IndexColumn.Definition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DefinitionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(IndexColumnBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.Definition;
				//return element.GetValue<global::System.String>("Definition", element.definitionPropertyStorage);
				//return element.definitionPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexColumnBase element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.definitionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("IndexColumn"));
				}
			}
		}
		
		#endregion
		#region SortOrder domain property code
		
		/// <summary>
		/// SortOrder domain property Id.
		/// </summary>
		public static readonly global::System.Guid SortOrderDomainPropertyId = new global::System.Guid(0x87394d79, 0x86a1, 0x4e18, 0x93, 0x5c, 0x29, 0x79, 0x3d, 0xf4, 0x5f, 0x39);
		
		/// <summary>
		/// Storage for SortOrder
		/// </summary>
		private global::System.Int32 sortOrderPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SortOrder domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("nHydrate.Dsl.IndexColumn/SortOrder.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("nHydrate.Dsl.IndexColumn/SortOrder.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.Browsable(false)]
		[DslModeling::DomainObjectId("87394d79-86a1-4e18-935c-29793df45f39")]
		public virtual global::System.Int32 SortOrder
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sortOrderPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SortOrderPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the IndexColumn.SortOrder domain property.
		/// </summary>
		internal sealed partial class SortOrderPropertyHandler : DslModeling::DomainPropertyValueHandler<IndexColumnBase, global::System.Int32>
		{
			private SortOrderPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the IndexColumn.SortOrder domain property value handler.
			/// </summary>
			public static readonly SortOrderPropertyHandler Instance = new SortOrderPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the IndexColumn.SortOrder domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SortOrderDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int32 GetValue(IndexColumnBase element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.SortOrder;
				//return element.GetValue<global::System.Int32>("SortOrder", element.sortOrderPropertyStorage);
				//return element.sortOrderPropertyStorage; //ORIGINAL CODE
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(IndexColumnBase element, global::System.Int32 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int32 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sortOrderPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
					element.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("IndexColumn"));
				}
			}
		}
		
		#endregion
		#region Index opposite domain role accessor
		/// <summary>
		/// Gets or sets Index.
		/// Description for nHydrate.Dsl.IndexHasIndexColumns.IndexColumn
		/// </summary>
		public virtual Index Index
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::nHydrate.Dsl.IndexHasIndexColumns.IndexColumnDomainRoleId) as Index;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::nHydrate.Dsl.IndexHasIndexColumns.IndexColumnDomainRoleId, value);
			}
		}
		#endregion
	}
	/// <summary>
	/// DomainClass IndexColumn
	/// </summary>
	[global::System.CLSCompliant(true)]
			
	public partial class IndexColumn : IndexColumnBase
	{
		#region Constructors
		// Constructors were not generated for this class because it had HasCustomConstructor
		// set to true. Please provide the constructors below in a partial class.
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="store">Store where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public IndexColumn(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		//{
		//}
		//
		///// <summary>
		///// Constructor
		///// </summary>
		///// <param name="partition">Partition where new element is to be created.</param>
		///// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		//public IndexColumn(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
		//	: base(partition, propertyAssignments)
		//{
		//}
		#endregion
	}
}
