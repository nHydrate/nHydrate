//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
using DslDiagrams = global::Microsoft.VisualStudio.Modeling.Diagrams;
namespace nHydrate.Dsl
{
	/// <summary>
	/// DomainModel nHydrateDomainModel
	/// This is the nHydrate Visual Modeler
	/// </summary>
	[DslDesign::DisplayNameResource("nHydrate.Dsl.nHydrateDomainModel.DisplayName", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("nHydrate.Dsl.nHydrateDomainModel.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.CoreDomainModel))]
	[DslModeling::DependsOnDomainModel(typeof(global::Microsoft.VisualStudio.Modeling.Diagrams.CoreDesignSurfaceDomainModel))]
	[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]
	[DslModeling::DomainObjectId("7a314716-48c9-4371-8978-062be635f9b4")]
	public partial class nHydrateDomainModel : DslModeling::DomainModel
	{
		#region Constructor, domain model Id
	
		/// <summary>
		/// nHydrateDomainModel domain model Id.
		/// </summary>
		public static readonly global::System.Guid DomainModelId = new global::System.Guid(0x7a314716, 0x48c9, 0x4371, 0x89, 0x78, 0x06, 0x2b, 0xe6, 0x35, 0xf9, 0xb4);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="store">Store containing the domain model.</param>
		public nHydrateDomainModel(DslModeling::Store store)
			: base(store, DomainModelId)
		{
			// Call the partial method to allow any required serialization setup to be done.
			this.InitializeSerialization(store);		
		}
		
	
		///<Summary>
		/// Defines a partial method that will be called from the constructor to
		/// allow any necessary serialization setup to be done.
		///</Summary>
		///<remarks>
		/// For a DSL created with the DSL Designer wizard, an implementation of this 
		/// method will be generated in the GeneratedCode\SerializationHelper.cs class.
		///</remarks>
		partial void InitializeSerialization(DslModeling::Store store);
	
	
		#endregion
		#region Domain model reflection
			
		/// <summary>
		/// Gets the list of generated domain model types (classes, rules, relationships).
		/// </summary>
		/// <returns>List of types.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override global::System.Type[] GetGeneratedDomainModelTypes()
		{
			return new global::System.Type[]
			{
				typeof(nHydrateModel),
				typeof(Entity),
				typeof(Field),
				typeof(View),
				typeof(ViewField),
				typeof(RelationField),
				typeof(StaticData),
				typeof(Index),
				typeof(IndexColumn),
				typeof(nHydrateModelHasEntities),
				typeof(EntityHasEntities),
				typeof(EntityHasFields),
				typeof(nHydrateModelHasViews),
				typeof(ViewHasFields),
				typeof(nHydrateModelHasRelationFields),
				typeof(EntityHasStaticDatum),
				typeof(EntityHasIndexes),
				typeof(IndexHasIndexColumns),
				typeof(nHydrateDiagram),
				typeof(EntityAssociationConnector),
				typeof(EntityShape),
				typeof(ViewShape),
				typeof(global::nHydrate.Dsl.FixUpDiagram),
				typeof(global::nHydrate.Dsl.DecoratorPropertyChanged),
				typeof(global::nHydrate.Dsl.ConnectorRolePlayerChanged),
				typeof(global::nHydrate.Dsl.CompartmentItemAddRule),
				typeof(global::nHydrate.Dsl.CompartmentItemDeleteRule),
				typeof(global::nHydrate.Dsl.CompartmentItemRolePlayerChangeRule),
				typeof(global::nHydrate.Dsl.CompartmentItemRolePlayerPositionChangeRule),
				typeof(global::nHydrate.Dsl.CompartmentItemChangeRule),
			};
		}
		/// <summary>
		/// Gets the list of generated domain properties.
		/// </summary>
		/// <returns>List of property data.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		protected sealed override DomainMemberInfo[] GetGeneratedDomainProperties()
		{
			return new DomainMemberInfo[]
			{
				new DomainMemberInfo(typeof(nHydrateModel), "CompanyName", nHydrateModel.CompanyNameDomainPropertyId, typeof(nHydrateModel.CompanyNamePropertyHandler)),
				new DomainMemberInfo(typeof(nHydrateModel), "DefaultNamespace", nHydrateModel.DefaultNamespaceDomainPropertyId, typeof(nHydrateModel.DefaultNamespacePropertyHandler)),
				new DomainMemberInfo(typeof(nHydrateModel), "ProjectName", nHydrateModel.ProjectNameDomainPropertyId, typeof(nHydrateModel.ProjectNamePropertyHandler)),
				new DomainMemberInfo(typeof(nHydrateModel), "UseUTCTime", nHydrateModel.UseUTCTimeDomainPropertyId, typeof(nHydrateModel.UseUTCTimePropertyHandler)),
				new DomainMemberInfo(typeof(nHydrateModel), "Version", nHydrateModel.VersionDomainPropertyId, typeof(nHydrateModel.VersionPropertyHandler)),
				new DomainMemberInfo(typeof(nHydrateModel), "CreatedByColumnName", nHydrateModel.CreatedByColumnNameDomainPropertyId, typeof(nHydrateModel.CreatedByColumnNamePropertyHandler)),
				new DomainMemberInfo(typeof(nHydrateModel), "CreatedDateColumnName", nHydrateModel.CreatedDateColumnNameDomainPropertyId, typeof(nHydrateModel.CreatedDateColumnNamePropertyHandler)),
				new DomainMemberInfo(typeof(nHydrateModel), "ModifiedDateColumnName", nHydrateModel.ModifiedDateColumnNameDomainPropertyId, typeof(nHydrateModel.ModifiedDateColumnNamePropertyHandler)),
				new DomainMemberInfo(typeof(nHydrateModel), "ModifiedByColumnName", nHydrateModel.ModifiedByColumnNameDomainPropertyId, typeof(nHydrateModel.ModifiedByColumnNamePropertyHandler)),
				new DomainMemberInfo(typeof(nHydrateModel), "ConcurrencyCheckColumnName", nHydrateModel.ConcurrencyCheckColumnNameDomainPropertyId, typeof(nHydrateModel.ConcurrencyCheckColumnNamePropertyHandler)),
				new DomainMemberInfo(typeof(nHydrateModel), "GrantUser", nHydrateModel.GrantUserDomainPropertyId, typeof(nHydrateModel.GrantUserPropertyHandler)),
				new DomainMemberInfo(typeof(nHydrateModel), "ModelToDisk", nHydrateModel.ModelToDiskDomainPropertyId, typeof(nHydrateModel.ModelToDiskPropertyHandler)),
				new DomainMemberInfo(typeof(nHydrateModel), "ModelVersion", nHydrateModel.ModelVersionDomainPropertyId, typeof(nHydrateModel.ModelVersionPropertyHandler)),
				new DomainMemberInfo(typeof(nHydrateModel), "OutputTarget", nHydrateModel.OutputTargetDomainPropertyId, typeof(nHydrateModel.OutputTargetPropertyHandler)),
				new DomainMemberInfo(typeof(nHydrateModel), "TenantColumnName", nHydrateModel.TenantColumnNameDomainPropertyId, typeof(nHydrateModel.TenantColumnNamePropertyHandler)),
				new DomainMemberInfo(typeof(nHydrateModel), "EmitSafetyScripts", nHydrateModel.EmitSafetyScriptsDomainPropertyId, typeof(nHydrateModel.EmitSafetyScriptsPropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "Name", Entity.NameDomainPropertyId, typeof(Entity.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "Summary", Entity.SummaryDomainPropertyId, typeof(Entity.SummaryPropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "AllowCreateAudit", Entity.AllowCreateAuditDomainPropertyId, typeof(Entity.AllowCreateAuditPropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "AllowModifyAudit", Entity.AllowModifyAuditDomainPropertyId, typeof(Entity.AllowModifyAuditPropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "AllowTimestamp", Entity.AllowTimestampDomainPropertyId, typeof(Entity.AllowTimestampPropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "IsAssociative", Entity.IsAssociativeDomainPropertyId, typeof(Entity.IsAssociativePropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "Immutable", Entity.ImmutableDomainPropertyId, typeof(Entity.ImmutablePropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "Schema", Entity.SchemaDomainPropertyId, typeof(Entity.SchemaPropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "CodeFacade", Entity.CodeFacadeDomainPropertyId, typeof(Entity.CodeFacadePropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "GeneratesDoubleDerived", Entity.GeneratesDoubleDerivedDomainPropertyId, typeof(Entity.GeneratesDoubleDerivedPropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "TypedEntity", Entity.TypedEntityDomainPropertyId, typeof(Entity.TypedEntityPropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "IsTenant", Entity.IsTenantDomainPropertyId, typeof(Entity.IsTenantPropertyHandler)),
				new DomainMemberInfo(typeof(Entity), "CopyStateInfo", Entity.CopyStateInfoDomainPropertyId, typeof(Entity.CopyStateInfoPropertyHandler)),
				new DomainMemberInfo(typeof(Field), "Name", Field.NameDomainPropertyId, typeof(Field.NamePropertyHandler)),
				new DomainMemberInfo(typeof(Field), "Nullable", Field.NullableDomainPropertyId, typeof(Field.NullablePropertyHandler)),
				new DomainMemberInfo(typeof(Field), "IsCalculated", Field.IsCalculatedDomainPropertyId, typeof(Field.IsCalculatedPropertyHandler)),
				new DomainMemberInfo(typeof(Field), "DataType", Field.DataTypeDomainPropertyId, typeof(Field.DataTypePropertyHandler)),
				new DomainMemberInfo(typeof(Field), "Default", Field.DefaultDomainPropertyId, typeof(Field.DefaultPropertyHandler)),
				new DomainMemberInfo(typeof(Field), "Summary", Field.SummaryDomainPropertyId, typeof(Field.SummaryPropertyHandler)),
				new DomainMemberInfo(typeof(Field), "Formula", Field.FormulaDomainPropertyId, typeof(Field.FormulaPropertyHandler)),
				new DomainMemberInfo(typeof(Field), "Identity", Field.IdentityDomainPropertyId, typeof(Field.IdentityPropertyHandler)),
				new DomainMemberInfo(typeof(Field), "IsIndexed", Field.IsIndexedDomainPropertyId, typeof(Field.IsIndexedPropertyHandler)),
				new DomainMemberInfo(typeof(Field), "IsUnique", Field.IsUniqueDomainPropertyId, typeof(Field.IsUniquePropertyHandler)),
				new DomainMemberInfo(typeof(Field), "Length", Field.LengthDomainPropertyId, typeof(Field.LengthPropertyHandler)),
				new DomainMemberInfo(typeof(Field), "IsPrimaryKey", Field.IsPrimaryKeyDomainPropertyId, typeof(Field.IsPrimaryKeyPropertyHandler)),
				new DomainMemberInfo(typeof(Field), "Scale", Field.ScaleDomainPropertyId, typeof(Field.ScalePropertyHandler)),
				new DomainMemberInfo(typeof(Field), "CodeFacade", Field.CodeFacadeDomainPropertyId, typeof(Field.CodeFacadePropertyHandler)),
				new DomainMemberInfo(typeof(Field), "IsReadOnly", Field.IsReadOnlyDomainPropertyId, typeof(Field.IsReadOnlyPropertyHandler)),
				new DomainMemberInfo(typeof(Field), "SortOrder", Field.SortOrderDomainPropertyId, typeof(Field.SortOrderPropertyHandler)),
				new DomainMemberInfo(typeof(Field), "DataFormatString", Field.DataFormatStringDomainPropertyId, typeof(Field.DataFormatStringPropertyHandler)),
				new DomainMemberInfo(typeof(Field), "DefaultIsFunc", Field.DefaultIsFuncDomainPropertyId, typeof(Field.DefaultIsFuncPropertyHandler)),
				new DomainMemberInfo(typeof(Field), "ImportedDefaultName", Field.ImportedDefaultNameDomainPropertyId, typeof(Field.ImportedDefaultNamePropertyHandler)),
				new DomainMemberInfo(typeof(Field), "Obsolete", Field.ObsoleteDomainPropertyId, typeof(Field.ObsoletePropertyHandler)),
				new DomainMemberInfo(typeof(View), "SQL", View.SQLDomainPropertyId, typeof(View.SQLPropertyHandler)),
				new DomainMemberInfo(typeof(View), "Name", View.NameDomainPropertyId, typeof(View.NamePropertyHandler)),
				new DomainMemberInfo(typeof(View), "CodeFacade", View.CodeFacadeDomainPropertyId, typeof(View.CodeFacadePropertyHandler)),
				new DomainMemberInfo(typeof(View), "Summary", View.SummaryDomainPropertyId, typeof(View.SummaryPropertyHandler)),
				new DomainMemberInfo(typeof(View), "Schema", View.SchemaDomainPropertyId, typeof(View.SchemaPropertyHandler)),
				new DomainMemberInfo(typeof(View), "GeneratesDoubleDerived", View.GeneratesDoubleDerivedDomainPropertyId, typeof(View.GeneratesDoubleDerivedPropertyHandler)),
				new DomainMemberInfo(typeof(ViewField), "Name", ViewField.NameDomainPropertyId, typeof(ViewField.NamePropertyHandler)),
				new DomainMemberInfo(typeof(ViewField), "Nullable", ViewField.NullableDomainPropertyId, typeof(ViewField.NullablePropertyHandler)),
				new DomainMemberInfo(typeof(ViewField), "DataType", ViewField.DataTypeDomainPropertyId, typeof(ViewField.DataTypePropertyHandler)),
				new DomainMemberInfo(typeof(ViewField), "Default", ViewField.DefaultDomainPropertyId, typeof(ViewField.DefaultPropertyHandler)),
				new DomainMemberInfo(typeof(ViewField), "Summary", ViewField.SummaryDomainPropertyId, typeof(ViewField.SummaryPropertyHandler)),
				new DomainMemberInfo(typeof(ViewField), "Length", ViewField.LengthDomainPropertyId, typeof(ViewField.LengthPropertyHandler)),
				new DomainMemberInfo(typeof(ViewField), "Scale", ViewField.ScaleDomainPropertyId, typeof(ViewField.ScalePropertyHandler)),
				new DomainMemberInfo(typeof(ViewField), "CodeFacade", ViewField.CodeFacadeDomainPropertyId, typeof(ViewField.CodeFacadePropertyHandler)),
				new DomainMemberInfo(typeof(ViewField), "IsPrimaryKey", ViewField.IsPrimaryKeyDomainPropertyId, typeof(ViewField.IsPrimaryKeyPropertyHandler)),
				new DomainMemberInfo(typeof(RelationField), "SourceFieldId", RelationField.SourceFieldIdDomainPropertyId, typeof(RelationField.SourceFieldIdPropertyHandler)),
				new DomainMemberInfo(typeof(RelationField), "TargetFieldId", RelationField.TargetFieldIdDomainPropertyId, typeof(RelationField.TargetFieldIdPropertyHandler)),
				new DomainMemberInfo(typeof(RelationField), "RelationID", RelationField.RelationIDDomainPropertyId, typeof(RelationField.RelationIDPropertyHandler)),
				new DomainMemberInfo(typeof(StaticData), "ColumnKey", StaticData.ColumnKeyDomainPropertyId, typeof(StaticData.ColumnKeyPropertyHandler)),
				new DomainMemberInfo(typeof(StaticData), "Value", StaticData.ValueDomainPropertyId, typeof(StaticData.ValuePropertyHandler)),
				new DomainMemberInfo(typeof(StaticData), "OrderKey", StaticData.OrderKeyDomainPropertyId, typeof(StaticData.OrderKeyPropertyHandler)),
				new DomainMemberInfo(typeof(Index), "ParentEntityID", Index.ParentEntityIDDomainPropertyId, typeof(Index.ParentEntityIDPropertyHandler)),
				new DomainMemberInfo(typeof(Index), "IsUnique", Index.IsUniqueDomainPropertyId, typeof(Index.IsUniquePropertyHandler)),
				new DomainMemberInfo(typeof(Index), "Summary", Index.SummaryDomainPropertyId, typeof(Index.SummaryPropertyHandler)),
				new DomainMemberInfo(typeof(Index), "Definition", Index.DefinitionDomainPropertyId, typeof(Index.DefinitionPropertyHandler)),
				new DomainMemberInfo(typeof(Index), "IndexType", Index.IndexTypeDomainPropertyId, typeof(Index.IndexTypePropertyHandler)),
				new DomainMemberInfo(typeof(Index), "ImportedName", Index.ImportedNameDomainPropertyId, typeof(Index.ImportedNamePropertyHandler)),
				new DomainMemberInfo(typeof(Index), "Clustered", Index.ClusteredDomainPropertyId, typeof(Index.ClusteredPropertyHandler)),
				new DomainMemberInfo(typeof(IndexColumn), "FieldID", IndexColumn.FieldIDDomainPropertyId, typeof(IndexColumn.FieldIDPropertyHandler)),
				new DomainMemberInfo(typeof(IndexColumn), "Ascending", IndexColumn.AscendingDomainPropertyId, typeof(IndexColumn.AscendingPropertyHandler)),
				new DomainMemberInfo(typeof(IndexColumn), "Definition", IndexColumn.DefinitionDomainPropertyId, typeof(IndexColumn.DefinitionPropertyHandler)),
				new DomainMemberInfo(typeof(IndexColumn), "SortOrder", IndexColumn.SortOrderDomainPropertyId, typeof(IndexColumn.SortOrderPropertyHandler)),
				new DomainMemberInfo(typeof(EntityHasEntities), "Multiplicity", EntityHasEntities.MultiplicityDomainPropertyId, typeof(EntityHasEntities.MultiplicityPropertyHandler)),
				new DomainMemberInfo(typeof(EntityHasEntities), "RoleName", EntityHasEntities.RoleNameDomainPropertyId, typeof(EntityHasEntities.RoleNamePropertyHandler)),
				new DomainMemberInfo(typeof(EntityHasEntities), "IsEnforced", EntityHasEntities.IsEnforcedDomainPropertyId, typeof(EntityHasEntities.IsEnforcedPropertyHandler)),
				new DomainMemberInfo(typeof(EntityHasEntities), "ImportData", EntityHasEntities.ImportDataDomainPropertyId, typeof(EntityHasEntities.ImportDataPropertyHandler)),
				new DomainMemberInfo(typeof(EntityHasEntities), "Summary", EntityHasEntities.SummaryDomainPropertyId, typeof(EntityHasEntities.SummaryPropertyHandler)),
				new DomainMemberInfo(typeof(EntityHasEntities), "ImportedConstraintName", EntityHasEntities.ImportedConstraintNameDomainPropertyId, typeof(EntityHasEntities.ImportedConstraintNamePropertyHandler)),
				new DomainMemberInfo(typeof(EntityHasEntities), "DeleteAction", EntityHasEntities.DeleteActionDomainPropertyId, typeof(EntityHasEntities.DeleteActionPropertyHandler)),
				new DomainMemberInfo(typeof(nHydrateDiagram), "DisplayType", nHydrateDiagram.DisplayTypeDomainPropertyId, typeof(nHydrateDiagram.DisplayTypePropertyHandler)),
				new DomainMemberInfo(typeof(EntityShape), "FillColor", EntityShape.FillColorDomainPropertyId, typeof(EntityShape.FillColorPropertyHandler)),
				new DomainMemberInfo(typeof(EntityShape), "TextColor", EntityShape.TextColorDomainPropertyId, typeof(EntityShape.TextColorPropertyHandler)),
				new DomainMemberInfo(typeof(EntityShape), "OutlineColor", EntityShape.OutlineColorDomainPropertyId, typeof(EntityShape.OutlineColorPropertyHandler)),
				new DomainMemberInfo(typeof(EntityShape), "OutlineDashStyle", EntityShape.OutlineDashStyleDomainPropertyId, typeof(EntityShape.OutlineDashStylePropertyHandler)),
			};
		}
		/// <summary>
		/// Gets the list of generated domain roles.
		/// </summary>
		/// <returns>List of role data.</returns>
		protected sealed override DomainRolePlayerInfo[] GetGeneratedDomainRoles()
		{
			return new DomainRolePlayerInfo[]
			{
				new DomainRolePlayerInfo(typeof(nHydrateModelHasEntities), "nHydrateModel", nHydrateModelHasEntities.nHydrateModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(nHydrateModelHasEntities), "Entity", nHydrateModelHasEntities.EntityDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityHasEntities), "ParentEntity", EntityHasEntities.ParentEntityDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityHasEntities), "ChildEntity", EntityHasEntities.ChildEntityDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityHasFields), "Entity", EntityHasFields.EntityDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityHasFields), "Field", EntityHasFields.FieldDomainRoleId),
				new DomainRolePlayerInfo(typeof(nHydrateModelHasViews), "nHydrateModel", nHydrateModelHasViews.nHydrateModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(nHydrateModelHasViews), "View", nHydrateModelHasViews.ViewDomainRoleId),
				new DomainRolePlayerInfo(typeof(ViewHasFields), "View", ViewHasFields.ViewDomainRoleId),
				new DomainRolePlayerInfo(typeof(ViewHasFields), "ViewField", ViewHasFields.ViewFieldDomainRoleId),
				new DomainRolePlayerInfo(typeof(nHydrateModelHasRelationFields), "nHydrateModel", nHydrateModelHasRelationFields.nHydrateModelDomainRoleId),
				new DomainRolePlayerInfo(typeof(nHydrateModelHasRelationFields), "RelationField", nHydrateModelHasRelationFields.RelationFieldDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityHasStaticDatum), "Entity", EntityHasStaticDatum.EntityDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityHasStaticDatum), "StaticData", EntityHasStaticDatum.StaticDataDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityHasIndexes), "Entity", EntityHasIndexes.EntityDomainRoleId),
				new DomainRolePlayerInfo(typeof(EntityHasIndexes), "Index", EntityHasIndexes.IndexDomainRoleId),
				new DomainRolePlayerInfo(typeof(IndexHasIndexColumns), "Index", IndexHasIndexColumns.IndexDomainRoleId),
				new DomainRolePlayerInfo(typeof(IndexHasIndexColumns), "IndexColumn", IndexHasIndexColumns.IndexColumnDomainRoleId),
			};
		}
		#endregion
		#region Factory methods
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementMap;
	
		/// <summary>
		/// Creates an element of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementType">Element type which belongs to this domain model.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "Generated code.")]	
		public sealed override DslModeling::ModelElement CreateElement(DslModeling::Partition partition, global::System.Type elementType, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementType == null) throw new global::System.ArgumentNullException("elementType");
	
			if (createElementMap == null)
			{
				createElementMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(13);
				createElementMap.Add(typeof(nHydrateModel), 0);
				createElementMap.Add(typeof(Entity), 1);
				createElementMap.Add(typeof(Field), 2);
				createElementMap.Add(typeof(View), 3);
				createElementMap.Add(typeof(ViewField), 4);
				createElementMap.Add(typeof(RelationField), 5);
				createElementMap.Add(typeof(StaticData), 6);
				createElementMap.Add(typeof(Index), 7);
				createElementMap.Add(typeof(IndexColumn), 8);
				createElementMap.Add(typeof(nHydrateDiagram), 9);
				createElementMap.Add(typeof(EntityAssociationConnector), 10);
				createElementMap.Add(typeof(EntityShape), 11);
				createElementMap.Add(typeof(ViewShape), 12);
			}
			int index;
			if (!createElementMap.TryGetValue(elementType, out index))
			{
				// construct exception error message		
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::nHydrate.Dsl.nHydrateDomainModel.SingletonResourceManager.GetString("UnrecognizedElementType"),
								elementType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementType");
			}
			switch (index)
			{
				// A constructor was not generated for nHydrateModel because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 0: return new nHydrateModel(partition, propertyAssignments);
				case 1: return new Entity(partition, propertyAssignments);
				// A constructor was not generated for Field because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 2: return new Field(partition, propertyAssignments);
				case 3: return new View(partition, propertyAssignments);
				// A constructor was not generated for ViewField because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 4: return new ViewField(partition, propertyAssignments);
				case 5: return new RelationField(partition, propertyAssignments);
				case 6: return new StaticData(partition, propertyAssignments);
				// A constructor was not generated for Index because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 7: return new Index(partition, propertyAssignments);
				// A constructor was not generated for IndexColumn because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 8: return new IndexColumn(partition, propertyAssignments);
				// A constructor was not generated for nHydrateDiagram because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 9: return new nHydrateDiagram(partition, propertyAssignments);
				// A constructor was not generated for EntityAssociationConnector because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 10: return new EntityAssociationConnector(partition, propertyAssignments);
				// A constructor was not generated for EntityShape because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 11: return new EntityShape(partition, propertyAssignments);
				case 12: return new ViewShape(partition, propertyAssignments);
				default: return null;
			}
		}
	
		private static global::System.Collections.Generic.Dictionary<global::System.Type, int> createElementLinkMap;
	
		/// <summary>
		/// Creates an element link of specified type.
		/// </summary>
		/// <param name="partition">Partition where element is to be created.</param>
		/// <param name="elementLinkType">Element link type which belongs to this domain model.</param>
		/// <param name="roleAssignments">List of relationship role assignments for the new link.</param>
		/// <param name="propertyAssignments">New element property assignments.</param>
		/// <returns>Created element link.</returns>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Maintainability", "CA1502:AvoidExcessiveComplexity")]
		public sealed override DslModeling::ElementLink CreateElementLink(DslModeling::Partition partition, global::System.Type elementLinkType, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
		{
			if (elementLinkType == null) throw new global::System.ArgumentNullException("elementLinkType");
			if (roleAssignments == null) throw new global::System.ArgumentNullException("roleAssignments");
	
			if (createElementLinkMap == null)
			{
				createElementLinkMap = new global::System.Collections.Generic.Dictionary<global::System.Type, int>(9);
				createElementLinkMap.Add(typeof(nHydrateModelHasEntities), 0);
				createElementLinkMap.Add(typeof(EntityHasEntities), 1);
				createElementLinkMap.Add(typeof(EntityHasFields), 2);
				createElementLinkMap.Add(typeof(nHydrateModelHasViews), 3);
				createElementLinkMap.Add(typeof(ViewHasFields), 4);
				createElementLinkMap.Add(typeof(nHydrateModelHasRelationFields), 5);
				createElementLinkMap.Add(typeof(EntityHasStaticDatum), 6);
				createElementLinkMap.Add(typeof(EntityHasIndexes), 7);
				createElementLinkMap.Add(typeof(IndexHasIndexColumns), 8);
			}
			int index;
			if (!createElementLinkMap.TryGetValue(elementLinkType, out index))
			{
				// construct exception error message
				string exceptionError = string.Format(
								global::System.Globalization.CultureInfo.CurrentCulture,
								global::nHydrate.Dsl.nHydrateDomainModel.SingletonResourceManager.GetString("UnrecognizedElementLinkType"),
								elementLinkType.Name);
				throw new global::System.ArgumentException(exceptionError, "elementLinkType");
			
			}
			switch (index)
			{
				case 0: return new nHydrateModelHasEntities(partition, roleAssignments, propertyAssignments);
				// A constructor was not generated for EntityHasEntities because it had HasCustomConstructor
				// set to true. Please provide the constructor below.
				case 1: return new EntityHasEntities(partition, roleAssignments, propertyAssignments);
				case 2: return new EntityHasFields(partition, roleAssignments, propertyAssignments);
				case 3: return new nHydrateModelHasViews(partition, roleAssignments, propertyAssignments);
				case 4: return new ViewHasFields(partition, roleAssignments, propertyAssignments);
				case 5: return new nHydrateModelHasRelationFields(partition, roleAssignments, propertyAssignments);
				case 6: return new EntityHasStaticDatum(partition, roleAssignments, propertyAssignments);
				case 7: return new EntityHasIndexes(partition, roleAssignments, propertyAssignments);
				case 8: return new IndexHasIndexColumns(partition, roleAssignments, propertyAssignments);
				default: return null;
			}
		}
		#endregion
		#region Resource manager
		
		private static global::System.Resources.ResourceManager resourceManager;
		
		/// <summary>
		/// The base name of this model's resources.
		/// </summary>
		public const string ResourceBaseName = "nHydrate.Dsl.GeneratedCode.DomainModelResx";
		
		/// <summary>
		/// Gets the DomainModel's ResourceManager. If the ResourceManager does not already exist, then it is created.
		/// </summary>
		public override global::System.Resources.ResourceManager ResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return nHydrateDomainModel.SingletonResourceManager;
			}
		}
	
		/// <summary>
		/// Gets the Singleton ResourceManager for this domain model.
		/// </summary>
		public static global::System.Resources.ResourceManager SingletonResourceManager
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				if (nHydrateDomainModel.resourceManager == null)
				{
					nHydrateDomainModel.resourceManager = new global::System.Resources.ResourceManager(ResourceBaseName, typeof(nHydrateDomainModel).Assembly);
				}
				return nHydrateDomainModel.resourceManager;
			}
		}
		#endregion
		#region Copy/Remove closures
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter copyClosure;
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter removeClosure;
		/// <summary>
		/// Returns an IElementVisitorFilter that corresponds to the ClosureType.
		/// </summary>
		/// <param name="type">closure type</param>
		/// <param name="rootElements">collection of root elements</param>
		/// <returns>IElementVisitorFilter or null</returns>
		public override DslModeling::IElementVisitorFilter GetClosureFilter(DslModeling::ClosureType type, global::System.Collections.Generic.ICollection<DslModeling::ModelElement> rootElements)
		{
			switch (type)
			{
				case DslModeling::ClosureType.CopyClosure:
					return nHydrateDomainModel.CopyClosure;
				case DslModeling::ClosureType.DeleteClosure:
					return nHydrateDomainModel.DeleteClosure;
			}
			return base.GetClosureFilter(type, rootElements);
		}
		/// <summary>
		/// CopyClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter CopyClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (nHydrateDomainModel.copyClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter copyFilter = new DslModeling::ChainingElementVisitorFilter();
					copyFilter.AddFilter(new nHydrateCopyClosure());
					copyFilter.AddFilter(new DslModeling::CoreCopyClosure());
					copyFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceCopyClosure());
					
					nHydrateDomainModel.copyClosure = copyFilter;
				}
				return nHydrateDomainModel.copyClosure;
			}
		}
		/// <summary>
		/// DeleteClosure cache
		/// </summary>
		private static DslModeling::IElementVisitorFilter DeleteClosure
		{
			get
			{
				// Incorporate all of the closures from the models we extend
				if (nHydrateDomainModel.removeClosure == null)
				{
					DslModeling::ChainingElementVisitorFilter removeFilter = new DslModeling::ChainingElementVisitorFilter();
					removeFilter.AddFilter(new nHydrateDeleteClosure());
					removeFilter.AddFilter(new DslModeling::CoreDeleteClosure());
					removeFilter.AddFilter(new DslDiagrams::CoreDesignSurfaceDeleteClosure());
		
					nHydrateDomainModel.removeClosure = removeFilter;
				}
				return nHydrateDomainModel.removeClosure;
			}
		}
		#endregion
		#region Diagram rule helpers
		/// <summary>
		/// Enables rules in this domain model related to diagram fixup for the given store.
		/// If diagram data will be loaded into the store, this method should be called first to ensure
		/// that the diagram behaves properly.
		/// </summary>
		public static void EnableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.EnableRule(typeof(global::nHydrate.Dsl.FixUpDiagram));
			ruleManager.EnableRule(typeof(global::nHydrate.Dsl.DecoratorPropertyChanged));
			ruleManager.EnableRule(typeof(global::nHydrate.Dsl.ConnectorRolePlayerChanged));
			ruleManager.EnableRule(typeof(global::nHydrate.Dsl.CompartmentItemAddRule));
			ruleManager.EnableRule(typeof(global::nHydrate.Dsl.CompartmentItemDeleteRule));
			ruleManager.EnableRule(typeof(global::nHydrate.Dsl.CompartmentItemRolePlayerChangeRule));
			ruleManager.EnableRule(typeof(global::nHydrate.Dsl.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.EnableRule(typeof(global::nHydrate.Dsl.CompartmentItemChangeRule));
		}
		
		/// <summary>
		/// Disables rules in this domain model related to diagram fixup for the given store.
		/// </summary>
		public static void DisableDiagramRules(DslModeling::Store store)
		{
			if(store == null) throw new global::System.ArgumentNullException("store");
			
			DslModeling::RuleManager ruleManager = store.RuleManager;
			ruleManager.DisableRule(typeof(global::nHydrate.Dsl.FixUpDiagram));
			ruleManager.DisableRule(typeof(global::nHydrate.Dsl.DecoratorPropertyChanged));
			ruleManager.DisableRule(typeof(global::nHydrate.Dsl.ConnectorRolePlayerChanged));
			ruleManager.DisableRule(typeof(global::nHydrate.Dsl.CompartmentItemAddRule));
			ruleManager.DisableRule(typeof(global::nHydrate.Dsl.CompartmentItemDeleteRule));
			ruleManager.DisableRule(typeof(global::nHydrate.Dsl.CompartmentItemRolePlayerChangeRule));
			ruleManager.DisableRule(typeof(global::nHydrate.Dsl.CompartmentItemRolePlayerPositionChangeRule));
			ruleManager.DisableRule(typeof(global::nHydrate.Dsl.CompartmentItemChangeRule));
		}
		#endregion
	}
		
	#region Copy/Remove closure classes
	/// <summary>
	/// Remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class nHydrateDeleteClosure : nHydrateDeleteClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public nHydrateDeleteClosure() : base()
		{
		}
	}
	
	/// <summary>
	/// Base class for remove closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class nHydrateDeleteClosureBase : DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary domainRoles;
		/// <summary>
		/// Constructor
		/// </summary>
		public nHydrateDeleteClosureBase()
		{
			#region Initialize DomainData Table
			DomainRoles.Add(global::nHydrate.Dsl.nHydrateModelHasEntities.EntityDomainRoleId, true);
			DomainRoles.Add(global::nHydrate.Dsl.EntityHasFields.FieldDomainRoleId, true);
			DomainRoles.Add(global::nHydrate.Dsl.nHydrateModelHasViews.ViewDomainRoleId, true);
			DomainRoles.Add(global::nHydrate.Dsl.ViewHasFields.ViewFieldDomainRoleId, true);
			DomainRoles.Add(global::nHydrate.Dsl.nHydrateModelHasRelationFields.RelationFieldDomainRoleId, true);
			DomainRoles.Add(global::nHydrate.Dsl.EntityHasStaticDatum.StaticDataDomainRoleId, true);
			DomainRoles.Add(global::nHydrate.Dsl.EntityHasIndexes.IndexDomainRoleId, true);
			DomainRoles.Add(global::nHydrate.Dsl.IndexHasIndexColumns.IndexColumnDomainRoleId, true);
			#endregion
		}
		/// <summary>
		/// Called to ask the filter if a particular relationship from a source element should be included in the traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="sourceRoleInfo">DomainRoleInfo of the role that the source element is playing in the relationship</param>
		/// <param name="domainRelationshipInfo">DomainRelationshipInfo for the ElementLink in question</param>
		/// <param name="targetRelationship">Relationship in question</param>
		/// <returns>Yes if the relationship should be traversed</returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRelationship(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::DomainRoleInfo sourceRoleInfo, DslModeling::DomainRelationshipInfo domainRelationshipInfo, DslModeling::ElementLink targetRelationship)
		{
			return DslModeling::VisitorFilterResult.Yes;
		}
		/// <summary>
		/// Called to ask the filter if a particular role player should be Visited during traversal
		/// </summary>
		/// <param name="walker">ElementWalker that is traversing the model</param>
		/// <param name="sourceElement">Model Element playing the source role</param>
		/// <param name="elementLink">Element Link that forms the relationship to the role player in question</param>
		/// <param name="targetDomainRole">DomainRoleInfo of the target role</param>
		/// <param name="targetRolePlayer">Model Element that plays the target role in the relationship</param>
		/// <returns></returns>
		public virtual DslModeling::VisitorFilterResult ShouldVisitRolePlayer(DslModeling::ElementWalker walker, DslModeling::ModelElement sourceElement, DslModeling::ElementLink elementLink, DslModeling::DomainRoleInfo targetDomainRole, DslModeling::ModelElement targetRolePlayer)
		{
			if (targetDomainRole == null) throw new global::System.ArgumentNullException("targetDomainRole");
			return this.DomainRoles.Contains(targetDomainRole.Id) ? DslModeling::VisitorFilterResult.Yes : DslModeling::VisitorFilterResult.DoNotCare;
		}
		/// <summary>
		/// DomainRoles
		/// </summary>
		private global::System.Collections.Specialized.HybridDictionary DomainRoles
		{
			get
			{
				if (this.domainRoles == null)
				{
					this.domainRoles = new global::System.Collections.Specialized.HybridDictionary();
				}
				return this.domainRoles;
			}
		}
	
	}
	/// <summary>
	/// Copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class nHydrateCopyClosure : nHydrateCopyClosureBase, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public nHydrateCopyClosure() : base()
		{
		}
	}
	/// <summary>
	/// Base class for copy closure visitor filter
	/// </summary>
	[global::System.CLSCompliant(true)]
	public partial class nHydrateCopyClosureBase : DslModeling::CopyClosureFilter, DslModeling::IElementVisitorFilter
	{
		/// <summary>
		/// Constructor
		/// </summary>
		public nHydrateCopyClosureBase():base()
		{
		}
	}
	#endregion
		
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// DomainEnumeration: DataTypeConstants
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum DataTypeConstants
	{
		/// <summary>
		/// BigInt
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/BigInt.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		BigInt,
		/// <summary>
		/// Binary
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/Binary.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Binary,
		/// <summary>
		/// Bit
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/Bit.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Bit,
		/// <summary>
		/// Char
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/Char.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Char,
		/// <summary>
		/// Date
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/Date.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Date,
		/// <summary>
		/// DateTime
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/DateTime.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		DateTime,
		/// <summary>
		/// DateTime2
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/DateTime2.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		DateTime2,
		/// <summary>
		/// DateTimeOffset
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/DateTimeOffset.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		DateTimeOffset,
		/// <summary>
		/// Decimal
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/Decimal.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Decimal,
		/// <summary>
		/// Float
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/Float.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Float,
		/// <summary>
		/// Image
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/Image.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Image,
		/// <summary>
		/// Int
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/Int.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Int,
		/// <summary>
		/// Money
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/Money.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Money,
		/// <summary>
		/// NChar
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/NChar.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		NChar,
		/// <summary>
		/// NText
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/NText.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		NText,
		/// <summary>
		/// NVarChar
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/NVarChar.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		NVarChar,
		/// <summary>
		/// Real
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/Real.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Real,
		/// <summary>
		/// SmallDateTime
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/SmallDateTime.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		SmallDateTime,
		/// <summary>
		/// SmallInt
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/SmallInt.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		SmallInt,
		/// <summary>
		/// SmallMoney
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/SmallMoney.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		SmallMoney,
		/// <summary>
		/// Structured
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/Structured.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Structured,
		/// <summary>
		/// Text
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/Text.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Text,
		/// <summary>
		/// Time
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/Time.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Time,
		/// <summary>
		/// Timestamp
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/Timestamp.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Timestamp,
		/// <summary>
		/// TinyInt
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/TinyInt.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		TinyInt,
		/// <summary>
		/// Udt
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/Udt.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Udt,
		/// <summary>
		/// UniqueIdentifier
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/UniqueIdentifier.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		UniqueIdentifier,
		/// <summary>
		/// VarBinary
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/VarBinary.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		VarBinary,
		/// <summary>
		/// VarChar
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/VarChar.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		VarChar,
		/// <summary>
		/// Variant
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/Variant.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Variant,
		/// <summary>
		/// Xml
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DataTypeConstants/Xml.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Xml,
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// DomainEnumeration: RelationshipTypeConstants
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum RelationshipTypeConstants
	{
		/// <summary>
		/// OneToOne
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.RelationshipTypeConstants/OneToOne.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		OneToOne,
		/// <summary>
		/// OneToMany
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.RelationshipTypeConstants/OneToMany.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		OneToMany,
		/// <summary>
		/// ManyToMany
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.RelationshipTypeConstants/ManyToMany.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		ManyToMany,
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// DomainEnumeration: IdentityTypeConstants
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum IdentityTypeConstants
	{
		/// <summary>
		/// None
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.IdentityTypeConstants/None.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		None,
		/// <summary>
		/// Database
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.IdentityTypeConstants/Database.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Database,
		/// <summary>
		/// Code
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.IdentityTypeConstants/Code.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Code,
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// DomainEnumeration: TypedEntityConstants
	/// Description for nHydrate.Dsl.TypedEntityConstants
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum TypedEntityConstants
	{
		/// <summary>
		/// None
		/// This is not a typed entity
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.TypedEntityConstants/None.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		None,
		/// <summary>
		/// DatabaseTable
		/// The typed entity has a backing database table
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.TypedEntityConstants/DatabaseTable.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		DatabaseTable,
		/// <summary>
		/// EnumOnly
		/// The typed entity is a code-only enumeration
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.TypedEntityConstants/EnumOnly.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		EnumOnly,
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// DomainEnumeration: IndexTypeConstants
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum IndexTypeConstants
	{
		/// <summary>
		/// PrimaryKey
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.IndexTypeConstants/PrimaryKey.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		PrimaryKey,
		/// <summary>
		/// IsIndexed
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.IndexTypeConstants/IsIndexed.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		IsIndexed,
		/// <summary>
		/// User
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.IndexTypeConstants/User.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		User,
	}
}
namespace nHydrate.Dsl
{
	/// <summary>
	/// DomainEnumeration: DeleteActionConstants
	/// Description for nHydrate.Dsl.DeleteActionConstants
	/// </summary>
	[global::System.CLSCompliant(true)]
	public enum DeleteActionConstants
	{
		/// <summary>
		/// NoAction
		/// Take no action on principal entity deletion
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DeleteActionConstants/NoAction.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		NoAction,
		/// <summary>
		/// Cascade
		/// Case delete of child objects
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DeleteActionConstants/Cascade.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		Cascade,
		/// <summary>
		/// SetNull
		/// On principal entity deletion, set foreign key to null
		/// </summary>
		[DslDesign::DescriptionResource("nHydrate.Dsl.DeleteActionConstants/SetNull.Description", typeof(global::nHydrate.Dsl.nHydrateDomainModel), "nHydrate.Dsl.GeneratedCode.DomainModelResx")]
		SetNull,
	}
}

