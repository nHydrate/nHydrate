<?xml version="1.0" encoding="utf-8"?>
<xsd:schema id="nHydrateSchema" targetNamespace="http://schemas.microsoft.com/dsltools/nHydrate" elementFormDefault="qualified" xmlns="http://schemas.microsoft.com/dsltools/nHydrate" xmlns:core="http://schemas.microsoft.com/VisualStudio/2008/DslTools/Core" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <xsd:import id="CoreSchema" namespace="http://schemas.microsoft.com/VisualStudio/2008/DslTools/Core" />
  <!-- nHydrateModel -->
  <xsd:element name="nHydrateModel" type="NHydrateModel" substitutionGroup="core:modelElement" />
  <xsd:complexType name="NHydrateModel">
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <xsd:sequence minOccurs="0" maxOccurs="1">
          <!-- Relationship: nHydrateModelHasEntities -->
          <xsd:element name="entities" minOccurs="0" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>Instances of nHydrateModelHasEntities</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:choice minOccurs="0" maxOccurs="unbounded" >
                  <xsd:element ref="nHydrateModelHasEntities">
                    <xsd:annotation>
                      <xsd:documentation>[Relationship deriving from nHydrateModelHasEntities needs to be serialized in full-form]</xsd:documentation>
                    </xsd:annotation>
                  </xsd:element>
                  <xsd:element ref="entity" >
                    <xsd:annotation>
                      <xsd:documentation>[Target role-player]</xsd:documentation>
                    </xsd:annotation>
                  </xsd:element>
                </xsd:choice>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <!-- Relationship: nHydrateModelHasViews -->
          <xsd:element name="views" minOccurs="0" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>Instances of nHydrateModelHasViews</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element ref="nHydrateModelHasViews" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                    <xsd:documentation>[Instance of nHydrateModelHasViews needs to be serialized in full-form]</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <!-- Relationship: nHydrateModelHasRelationFields -->
          <xsd:element name="relationFields" minOccurs="0" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>Instances of nHydrateModelHasRelationFields</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element ref="nHydrateModelHasRelationFields" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                    <xsd:documentation>[Instance of nHydrateModelHasRelationFields needs to be serialized in full-form]</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- dslVersion -->
        <xsd:attribute name="dslVersion" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Version of the model serialized in this file.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: CompanyName -->
        <xsd:attribute name="companyName" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Specifies the company name that will be used to build namespaces</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: DefaultNamespace -->
        <xsd:attribute name="defaultNamespace" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the default namespace and base project names of all generated projects. Leave blank for the default value of CompanyName.ProjectName</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: ProjectName -->
        <xsd:attribute name="projectName" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Specifies the name of the generated assembly</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: UseUTCTime -->
        <xsd:attribute name="useUTCTime" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Specifies whether UTC or local time is used for the created and modified audits</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Version -->
        <xsd:attribute name="version" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Specifies the version number of the generated assembly</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: CreatedByColumnName -->
        <xsd:attribute name="createdByColumnName" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the name of the created by field</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: CreatedDateColumnName -->
        <xsd:attribute name="createdDateColumnName" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the name of the created date field</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: ModifiedDateColumnName -->
        <xsd:attribute name="modifiedDateColumnName" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the name of the modified date field</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: ModifiedByColumnName -->
        <xsd:attribute name="modifiedByColumnName" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the name of the modified by field</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: ConcurrencyCheckColumnName -->
        <xsd:attribute name="concurrencyCheckColumnName" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the name of the column used for optimistic concurrency</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: GrantUser -->
        <xsd:attribute name="grantUser" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the database user to grant access permissions to for database objects</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: ModelToDisk -->
        <xsd:attribute name="modelToDisk" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if model objects are duplicated on disk for easy editing</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: ModelVersion -->
        <xsd:attribute name="modelVersion" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the version of the model. Used for tracking changes and provides an upgrade path for older models</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: OutputTarget -->
        <xsd:attribute name="outputTarget" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>The target location for generated projects</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: TenantColumnName -->
        <xsd:attribute name="tenantColumnName" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the name of the column to hold tenant information for tenant tables</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: EmitSafetyScripts -->
        <xsd:attribute name="emitSafetyScripts" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if normalization safety scripts are emitted into the installer</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- nHydrateModel Moniker -->
  <xsd:element name="nHydrateModelMoniker" type="NHydrateModelMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="NHydrateModelMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for nHydrateModel instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="Id" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- Entity -->
  <xsd:element name="entity" type="Entity" substitutionGroup="core:modelElement" />
  <xsd:complexType name="Entity">
    <xsd:annotation>
      <xsd:documentation>This object represents a database table</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <xsd:sequence minOccurs="0" maxOccurs="1">
          <!-- Relationship: EntityHasEntities -->
          <xsd:element name="childEntities" minOccurs="0" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>Instances of EntityHasEntities</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element ref="entityHasEntities" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                    <xsd:documentation>[Instance of EntityHasEntities needs to be serialized in full-form]</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <!-- Relationship: EntityHasFields -->
          <xsd:element name="fields" minOccurs="0" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>Instances of EntityHasFields</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element ref="entityHasFields" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                    <xsd:documentation>[Instance of EntityHasFields needs to be serialized in full-form]</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <!-- Relationship: EntityHasStaticDatum -->
          <xsd:element name="staticDatum" minOccurs="0" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>Instances of EntityHasStaticDatum</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element ref="entityHasStaticDatum" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                    <xsd:documentation>[Instance of EntityHasStaticDatum needs to be serialized in full-form]</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <!-- Relationship: EntityHasIndexes -->
          <xsd:element name="indexes" minOccurs="0" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>Instances of EntityHasIndexes</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element ref="entityHasIndexes" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                    <xsd:documentation>[Instance of EntityHasIndexes needs to be serialized in full-form]</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Name -->
        <xsd:attribute name="name" type="xsd:string" use="required" >
          <xsd:annotation>
            <xsd:documentation>Determines the name of this entity</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Summary -->
        <xsd:attribute name="summary" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>A summary of the entity</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: AllowCreateAudit -->
        <xsd:attribute name="allowCreateAudit" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if the fields &apos;CreatedBy&apos; and &apos;CreateDate&apos; are created</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: AllowModifyAudit -->
        <xsd:attribute name="allowModifyAudit" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if the fields &apos;ModifiedBy&apos; and &apos;ModifiedDate&apos; are created</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: AllowTimestamp -->
        <xsd:attribute name="allowTimestamp" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if this table will have a timestamp field created and used for synchronization</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: IsAssociative -->
        <xsd:attribute name="isAssociative" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if this is an intermediary entity between two other entities</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Immutable -->
        <xsd:attribute name="immutable" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if this entity can be changed</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Schema -->
        <xsd:attribute name="schema" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>The database schema in which this entity lives</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: CodeFacade -->
        <xsd:attribute name="codeFacade" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the object name used in the API. If this property is blank the &apos;Name&apos; property is used in the API. This property can be used to mask the database identifier.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: GeneratesDoubleDerived -->
        <xsd:attribute name="generatesDoubleDerived" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>If True, will generate both a base class with all functionality and a partial class to support customization through overrides</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: TypedEntity -->
        <xsd:attribute name="typedEntity" type="TypedEntityConstants" >
          <xsd:annotation>
            <xsd:documentation>Determines if this is a typed entity</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: IsTenant -->
        <xsd:attribute name="isTenant" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if the table is tenant based</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: CopyStateInfo -->
        <xsd:attribute name="copyStateInfo" type="xsd:string" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- Entity Moniker -->
  <xsd:element name="entityMoniker" type="EntityMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="EntityMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for Entity instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="name" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- Field -->
  <xsd:element name="field" type="Field" substitutionGroup="core:modelElement" />
  <xsd:complexType name="Field">
    <xsd:annotation>
      <xsd:documentation>This is a field in a database table</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Name -->
        <xsd:attribute name="name" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the name of this field</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Nullable -->
        <xsd:attribute name="nullable" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if this item allows null values</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: IsCalculated -->
        <xsd:attribute name="isCalculated" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if this field is based on a calculated database column</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: DataType -->
        <xsd:attribute name="dataType" type="DataTypeConstants" >
          <xsd:annotation>
            <xsd:documentation>Determines the data type of this field</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Default -->
        <xsd:attribute name="default" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the default value of this field</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Summary -->
        <xsd:attribute name="summary" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines summary text were applicable</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Formula -->
        <xsd:attribute name="formula" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>The formula for a computed field</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Identity -->
        <xsd:attribute name="identity" type="IdentityTypeConstants" >
          <xsd:annotation>
            <xsd:documentation>Determines the type of identity for this column</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: IsIndexed -->
        <xsd:attribute name="isIndexed" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if this field has an associated database index</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: IsUnique -->
        <xsd:attribute name="isUnique" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if this field is marked as unique</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Length -->
        <xsd:attribute name="length" type="xsd:integer" >
          <xsd:annotation>
            <xsd:documentation>Determines the size of this column in bytes</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: IsPrimaryKey -->
        <xsd:attribute name="isPrimaryKey" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determine if this field is the entity primary key</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Scale -->
        <xsd:attribute name="scale" type="xsd:integer" >
          <xsd:annotation>
            <xsd:documentation>Determines the scale of some data types</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: CodeFacade -->
        <xsd:attribute name="codeFacade" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the object name used in the API. If this property is blank the &apos;Name&apos; property is used in the API. This property can be used to mask the database identifier.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: IsReadOnly -->
        <xsd:attribute name="isReadOnly" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if the property can be set in code</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: SortOrder -->
        <xsd:attribute name="sortOrder" type="xsd:integer" >
          <xsd:annotation>
            <xsd:documentation>Order Entered/Database order</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: DataFormatString -->
        <xsd:attribute name="dataFormatString" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Identifies the format string for data input and presentation</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: DefaultIsFunc -->
        <xsd:attribute name="defaultIsFunc" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if the default value is a function</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: ImportedDefaultName -->
        <xsd:attribute name="importedDefaultName" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>The imported database default name</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Obsolete -->
        <xsd:attribute name="obsolete" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if this property should create a compiler warning</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- Field Moniker -->
  <xsd:element name="fieldMoniker" type="FieldMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="FieldMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for Field instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="Id" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- View -->
  <xsd:element name="view" type="View" substitutionGroup="core:modelElement" />
  <xsd:complexType name="View">
    <xsd:annotation>
      <xsd:documentation>This is a custom database view</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <xsd:sequence minOccurs="0" maxOccurs="1">
          <!-- Relationship: ViewHasFields -->
          <xsd:element name="fields" minOccurs="0" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>Instances of ViewHasFields</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element ref="viewHasFields" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                    <xsd:documentation>[Instance of ViewHasFields needs to be serialized in full-form]</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: SQL -->
        <xsd:attribute name="sQL" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines SQL statement used to create the database view object</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Name -->
        <xsd:attribute name="name" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the name of this object</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: CodeFacade -->
        <xsd:attribute name="codeFacade" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the object name used in the API. If this property is blank the &apos;Name&apos; property is used in the API. This property can be used to mask the database identifier.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Summary -->
        <xsd:attribute name="summary" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the summary of this object</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Schema -->
        <xsd:attribute name="schema" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the parent schema for this object</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: GeneratesDoubleDerived -->
        <xsd:attribute name="generatesDoubleDerived" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>If True, will generate both a base class with all functionality and a partial class to support customization through overrides</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- View Moniker -->
  <xsd:element name="viewMoniker" type="ViewMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="ViewMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for View instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="Id" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- ViewField -->
  <xsd:element name="viewField" type="ViewField" substitutionGroup="core:modelElement" />
  <xsd:complexType name="ViewField">
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Name -->
        <xsd:attribute name="name" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the name of this object</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Nullable -->
        <xsd:attribute name="nullable" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if this item allows null values</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: DataType -->
        <xsd:attribute name="dataType" type="DataTypeConstants" >
          <xsd:annotation>
            <xsd:documentation>Determines the data type of this field</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Default -->
        <xsd:attribute name="default" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the default value of this object</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Summary -->
        <xsd:attribute name="summary" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the summary of this object</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Length -->
        <xsd:attribute name="length" type="xsd:integer" >
          <xsd:annotation>
            <xsd:documentation>Determines the size of this field in bytes</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Scale -->
        <xsd:attribute name="scale" type="xsd:integer" >
          <xsd:annotation>
            <xsd:documentation>Determines the scale of some data types</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: CodeFacade -->
        <xsd:attribute name="codeFacade" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the object name used in the API. If this property is blank the &apos;Name&apos; property is used in the API. This property can be used to mask the database identifier.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: IsPrimaryKey -->
        <xsd:attribute name="isPrimaryKey" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determine if this field is the entity primary key</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- ViewField Moniker -->
  <xsd:element name="viewFieldMoniker" type="ViewFieldMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="ViewFieldMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for ViewField instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="Id" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- RelationField -->
  <xsd:element name="relationField" type="RelationField" substitutionGroup="core:modelElement" />
  <xsd:complexType name="RelationField">
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: SourceFieldId -->
        <xsd:attribute name="sourceFieldId" type="xsd:string" />
        <!-- Property: TargetFieldId -->
        <xsd:attribute name="targetFieldId" type="xsd:string" />
        <!-- Property: RelationID -->
        <xsd:attribute name="relationID" type="xsd:string" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- RelationField Moniker -->
  <xsd:element name="relationFieldMoniker" type="RelationFieldMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="RelationFieldMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for RelationField instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="Id" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- StaticData -->
  <xsd:element name="staticData" type="StaticData" substitutionGroup="core:modelElement" />
  <xsd:complexType name="StaticData">
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: ColumnKey -->
        <xsd:attribute name="columnKey" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>The column identifier for the field value</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Value -->
        <xsd:attribute name="value" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>The value for this column in the current record</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: OrderKey -->
        <xsd:attribute name="orderKey" type="xsd:integer" >
          <xsd:annotation>
            <xsd:documentation>The record number [1..N]</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- StaticData Moniker -->
  <xsd:element name="staticDataMoniker" type="StaticDataMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="StaticDataMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for StaticData instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="Id" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- Index -->
  <xsd:element name="index" type="Index" substitutionGroup="core:modelElement" />
  <xsd:complexType name="Index">
    <xsd:annotation>
      <xsd:documentation>A defined index for an entity</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <xsd:sequence minOccurs="0" maxOccurs="1">
          <!-- Relationship: IndexHasIndexColumns -->
          <xsd:element name="indexColumns" minOccurs="0" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>Instances of IndexHasIndexColumns</xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element ref="indexHasIndexColumns" minOccurs="0" maxOccurs="unbounded">
                  <xsd:annotation>
                    <xsd:documentation>[Instance of IndexHasIndexColumns needs to be serialized in full-form]</xsd:documentation>
                  </xsd:annotation>
                </xsd:element>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: ParentEntityID -->
        <xsd:attribute name="parentEntityID" type="xsd:string" />
        <!-- Property: IsUnique -->
        <xsd:attribute name="isUnique" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if this index is unique</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Summary -->
        <xsd:attribute name="summary" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines the summary of this object</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: IndexType -->
        <xsd:attribute name="indexType" type="IndexTypeConstants" />
        <!-- Property: ImportedName -->
        <xsd:attribute name="importedName" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>The original name imported from database</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Clustered -->
        <xsd:attribute name="clustered" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Create this a a clustered index</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- Index Moniker -->
  <xsd:element name="indexMoniker" type="IndexMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="IndexMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for Index instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="Id" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- IndexColumn -->
  <xsd:element name="indexColumn" type="IndexColumn" substitutionGroup="core:modelElement" />
  <xsd:complexType name="IndexColumn">
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: FieldID -->
        <xsd:attribute name="fieldID" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>The referenced entity field</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Ascending -->
        <xsd:attribute name="ascending" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if this column is indexed in ascending order</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: SortOrder -->
        <xsd:attribute name="sortOrder" type="xsd:integer" />
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- IndexColumn Moniker -->
  <xsd:element name="indexColumnMoniker" type="IndexColumnMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="IndexColumnMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for IndexColumn instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="Id" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- nHydrateModelHasEntities -->
  <xsd:element name="nHydrateModelHasEntities" abstract="true" type="NHydrateModelHasEntities" substitutionGroup="core:modelElement" />
  <xsd:complexType name="NHydrateModelHasEntities" abstract="true" >
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <xsd:sequence minOccurs="0" maxOccurs="1">
          <!-- Target end Entity -->
          <xsd:element ref="entity" minOccurs="1" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>[Target role-player]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- nHydrateModelHasEntities Moniker -->
  <xsd:element name="nHydrateModelHasEntitiesMoniker" type="NHydrateModelHasEntitiesMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="NHydrateModelHasEntitiesMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for nHydrateModelHasEntities instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="Id" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- EntityHasEntities -->
  <xsd:element name="entityHasEntities" type="EntityHasEntities" substitutionGroup="core:modelElement" />
  <xsd:complexType name="EntityHasEntities">
    <xsd:annotation>
      <xsd:documentation>Association relationship between entities</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <xsd:sequence minOccurs="0" maxOccurs="1">
          <!-- Target end Entity -->
          <xsd:element ref="entityMoniker" minOccurs="1" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>[Target role-player]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Multiplicity -->
        <xsd:attribute name="multiplicity" type="RelationshipTypeConstants" >
          <xsd:annotation>
            <xsd:documentation>Determines the multiplicity of this relationship</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: RoleName -->
        <xsd:attribute name="roleName" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>The named relation necessary when there is more than one relation between two entities</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: IsEnforced -->
        <xsd:attribute name="isEnforced" type="xsd:boolean" >
          <xsd:annotation>
            <xsd:documentation>Determines if this relationship is enfored in the database or just in code</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: ImportData -->
        <xsd:attribute name="importData" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Internal data to track imports</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: Summary -->
        <xsd:attribute name="summary" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Determines summary text were applicable</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: ImportedConstraintName -->
        <xsd:attribute name="importedConstraintName" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>The imported database constraint name</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <!-- Property: DeleteAction -->
        <xsd:attribute name="deleteAction" type="DeleteActionConstants" >
          <xsd:annotation>
            <xsd:documentation>Determines the action on chld objects when principal entity is deleted</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- EntityHasEntities Moniker -->
  <xsd:element name="entityHasEntitiesMoniker" type="EntityHasEntitiesMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="EntityHasEntitiesMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for EntityHasEntities instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="Id" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- EntityHasFields -->
  <xsd:element name="entityHasFields" type="EntityHasFields" substitutionGroup="core:modelElement" />
  <xsd:complexType name="EntityHasFields">
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <xsd:sequence minOccurs="0" maxOccurs="1">
          <!-- Target end Field -->
          <xsd:element ref="field" minOccurs="1" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>[Target role-player]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- EntityHasFields Moniker -->
  <xsd:element name="entityHasFieldsMoniker" type="EntityHasFieldsMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="EntityHasFieldsMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for EntityHasFields instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="Id" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- nHydrateModelHasViews -->
  <xsd:element name="nHydrateModelHasViews" type="NHydrateModelHasViews" substitutionGroup="core:modelElement" />
  <xsd:complexType name="NHydrateModelHasViews">
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <xsd:sequence minOccurs="0" maxOccurs="1">
          <!-- Target end View -->
          <xsd:element ref="view" minOccurs="1" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>[Target role-player]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- nHydrateModelHasViews Moniker -->
  <xsd:element name="nHydrateModelHasViewsMoniker" type="NHydrateModelHasViewsMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="NHydrateModelHasViewsMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for nHydrateModelHasViews instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="Id" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- ViewHasFields -->
  <xsd:element name="viewHasFields" type="ViewHasFields" substitutionGroup="core:modelElement" />
  <xsd:complexType name="ViewHasFields">
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <xsd:sequence minOccurs="0" maxOccurs="1">
          <!-- Target end ViewField -->
          <xsd:element ref="viewField" minOccurs="1" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>[Target role-player]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- ViewHasFields Moniker -->
  <xsd:element name="viewHasFieldsMoniker" type="ViewHasFieldsMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="ViewHasFieldsMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for ViewHasFields instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="Id" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- nHydrateModelHasRelationFields -->
  <xsd:element name="nHydrateModelHasRelationFields" type="NHydrateModelHasRelationFields" substitutionGroup="core:modelElement" />
  <xsd:complexType name="NHydrateModelHasRelationFields">
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <xsd:sequence minOccurs="0" maxOccurs="1">
          <!-- Target end RelationField -->
          <xsd:element ref="relationField" minOccurs="1" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>[Target role-player]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- nHydrateModelHasRelationFields Moniker -->
  <xsd:element name="nHydrateModelHasRelationFieldsMoniker" type="NHydrateModelHasRelationFieldsMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="NHydrateModelHasRelationFieldsMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for nHydrateModelHasRelationFields instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="Id" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- EntityHasStaticDatum -->
  <xsd:element name="entityHasStaticDatum" type="EntityHasStaticDatum" substitutionGroup="core:modelElement" />
  <xsd:complexType name="EntityHasStaticDatum">
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <xsd:sequence minOccurs="0" maxOccurs="1">
          <!-- Target end StaticData -->
          <xsd:element ref="staticData" minOccurs="1" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>[Target role-player]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- EntityHasStaticDatum Moniker -->
  <xsd:element name="entityHasStaticDatumMoniker" type="EntityHasStaticDatumMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="EntityHasStaticDatumMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for EntityHasStaticDatum instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="Id" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- EntityHasIndexes -->
  <xsd:element name="entityHasIndexes" type="EntityHasIndexes" substitutionGroup="core:modelElement" />
  <xsd:complexType name="EntityHasIndexes">
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <xsd:sequence minOccurs="0" maxOccurs="1">
          <!-- Target end Index -->
          <xsd:element ref="index" minOccurs="1" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>[Target role-player]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- EntityHasIndexes Moniker -->
  <xsd:element name="entityHasIndexesMoniker" type="EntityHasIndexesMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="EntityHasIndexesMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for EntityHasIndexes instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="Id" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- IndexHasIndexColumns -->
  <xsd:element name="indexHasIndexColumns" type="IndexHasIndexColumns" substitutionGroup="core:modelElement" />
  <xsd:complexType name="IndexHasIndexColumns">
    <xsd:complexContent>
      <xsd:extension base="core:ModelElement">
        <xsd:sequence minOccurs="0" maxOccurs="1">
          <!-- Target end IndexColumn -->
          <xsd:element ref="indexColumn" minOccurs="1" maxOccurs="1">
            <xsd:annotation>
              <xsd:documentation>[Target role-player]</xsd:documentation>
            </xsd:annotation>
          </xsd:element>
        </xsd:sequence>
        <!-- Id -->
        <xsd:attribute name="Id" type="xsd:string">
          <xsd:annotation>
            <xsd:documentation>Instance Guid of this element, needed because SerializeId is set to true.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- IndexHasIndexColumns Moniker -->
  <xsd:element name="indexHasIndexColumnsMoniker" type="IndexHasIndexColumnsMoniker" substitutionGroup="core:modelElementMoniker" />
  <xsd:complexType name="IndexHasIndexColumnsMoniker">
    <xsd:annotation>
      <xsd:documentation>Moniker for IndexHasIndexColumns instance.</xsd:documentation>
    </xsd:annotation>
    <xsd:complexContent>
      <xsd:extension base="core:ModelElementMoniker">
        <xsd:attribute name="Id" type="xsd:string" >
          <xsd:annotation>
            <xsd:documentation>Attribute to store the moniker string.</xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  
  <!-- Enum DataTypeConstants -->
  <xsd:simpleType name="DataTypeConstants">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="BigInt"/>
      <xsd:enumeration value="Binary"/>
      <xsd:enumeration value="Bit"/>
      <xsd:enumeration value="Char"/>
      <xsd:enumeration value="Date"/>
      <xsd:enumeration value="DateTime"/>
      <xsd:enumeration value="DateTime2"/>
      <xsd:enumeration value="DateTimeOffset"/>
      <xsd:enumeration value="Decimal"/>
      <xsd:enumeration value="Float"/>
      <xsd:enumeration value="Image"/>
      <xsd:enumeration value="Int"/>
      <xsd:enumeration value="Money"/>
      <xsd:enumeration value="NChar"/>
      <xsd:enumeration value="NText"/>
      <xsd:enumeration value="NVarChar"/>
      <xsd:enumeration value="Real"/>
      <xsd:enumeration value="SmallDateTime"/>
      <xsd:enumeration value="SmallInt"/>
      <xsd:enumeration value="SmallMoney"/>
      <xsd:enumeration value="Structured"/>
      <xsd:enumeration value="Text"/>
      <xsd:enumeration value="Time"/>
      <xsd:enumeration value="Timestamp"/>
      <xsd:enumeration value="TinyInt"/>
      <xsd:enumeration value="Udt"/>
      <xsd:enumeration value="UniqueIdentifier"/>
      <xsd:enumeration value="VarBinary"/>
      <xsd:enumeration value="VarChar"/>
      <xsd:enumeration value="Variant"/>
      <xsd:enumeration value="Xml"/>
    </xsd:restriction>
  </xsd:simpleType>
  
  <!-- Enum RelationshipTypeConstants -->
  <xsd:simpleType name="RelationshipTypeConstants">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="OneToOne"/>
      <xsd:enumeration value="OneToMany"/>
      <xsd:enumeration value="ManyToMany"/>
    </xsd:restriction>
  </xsd:simpleType>
  
  <!-- Enum IdentityTypeConstants -->
  <xsd:simpleType name="IdentityTypeConstants">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="None"/>
      <xsd:enumeration value="Database"/>
      <xsd:enumeration value="Code"/>
    </xsd:restriction>
  </xsd:simpleType>
  
  <!-- Enum TypedEntityConstants -->
  <xsd:simpleType name="TypedEntityConstants">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="None">
        <xsd:annotation>
          <xsd:documentation>This is not a typed entity</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="DatabaseTable">
        <xsd:annotation>
          <xsd:documentation>The typed entity has a backing database table</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="EnumOnly">
        <xsd:annotation>
          <xsd:documentation>The typed entity is a code-only enumeration</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  
  <!-- Enum IndexTypeConstants -->
  <xsd:simpleType name="IndexTypeConstants">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="PrimaryKey"/>
      <xsd:enumeration value="IsIndexed"/>
      <xsd:enumeration value="User"/>
    </xsd:restriction>
  </xsd:simpleType>
  
  <!-- Enum DeleteActionConstants -->
  <xsd:simpleType name="DeleteActionConstants">
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="NoAction">
        <xsd:annotation>
          <xsd:documentation>Take no action on principal entity deletion</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="Cascade">
        <xsd:annotation>
          <xsd:documentation>Case delete of child objects</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
      <xsd:enumeration value="SetNull">
        <xsd:annotation>
          <xsd:documentation>On principal entity deletion, set foreign key to null</xsd:documentation>
        </xsd:annotation>
      </xsd:enumeration>
    </xsd:restriction>
  </xsd:simpleType>
  
</xsd:schema>

